<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<report>
    <reportName>rpt_PermanentVacancies</reportName>
    <visible>true</visible>
    <metadata>
        <location>KidsXap-Test-Public/1573701731765</location>
        <metadataFileName>38765bc6-6fec-4ac5-a51b-7d3fd5dd38be.metadata</metadataFileName>
    </metadata>
    <canvas>
        <columns><![CDATA[[{"column":"PermanentVacanciesView.DayId","label":"DayId","id":"mibep57f3td","type":{"dataType":"text","backendDatatype":"java.lang.String"},"autogen_alias":"DayId","groupBy":["db.generic.groupBy.group"]},{"column":"PermanentVacanciesView.Rooms","label":"Rooms","id":"wwyksqsu6wq","type":{"dataType":"text","backendDatatype":"java.lang.String"},"autogen_alias":"Rooms","groupBy":["db.generic.groupBy.group"]},{"label":"Custom Column","custom":true,"column":"(max(TotalRoomCapacity) - max(TotalBookingsDaywise))","alias":"Permanent Vacancies","id":"nvsb2nz2wb"}]]]></columns>
    </canvas>
    <state><![CDATA[{"columns":[{"column":"PermanentVacanciesView.DayId","label":"DayId","id":"mibep57f3td","type":{"dataType":"text","backendDatatype":"java.lang.String"},"autogen_alias":"DayId","groupBy":["db.generic.groupBy.group"]},{"column":"PermanentVacanciesView.Rooms","label":"Rooms","id":"wwyksqsu6wq","type":{"dataType":"text","backendDatatype":"java.lang.String"},"autogen_alias":"Rooms","groupBy":["db.generic.groupBy.group"]},{"label":"Custom Column","custom":true,"column":"(max(TotalRoomCapacity) - max(TotalBookingsDaywise))","alias":"Permanent Vacancies","id":"nvsb2nz2wb"}],"filters":[{"values":["_all_"],"mode":"auto","dataType":"text","orderBy":"","valuesMode":"auto","isFilterEditable":false,"encloseInQuotes":false,"dateTimeToggle":false,"databaseFunction":{},"label":"Provider","column":"PermanentVacanciesView.Provider","backendDataType":"java.lang.String","rangeValuesType":"","id":1,"condition":"IS_ONE_OF","valuesRange":{},"rangeSelectionToggole":true},{"values":["_all_"],"mode":"auto","dataType":"text","orderBy":"","valuesMode":"auto","isFilterEditable":false,"encloseInQuotes":false,"dateTimeToggle":false,"databaseFunction":{},"label":"Centre","column":"PermanentVacanciesView.Centre","backendDataType":"java.lang.String","rangeValuesType":"","id":2,"condition":"IS_ONE_OF","valuesRange":{},"rangeSelectionToggole":true},{"values":["2020-06-01"],"mode":"auto","dataType":"date","orderBy":"","valuesMode":"auto","isFilterEditable":false,"encloseInQuotes":false,"dateTimeToggle":true,"databaseFunction":{},"label":"Weekend Start Date","column":"PermanentVacanciesView.WeekEndDate","backendDataType":"java.sql.Date","rangeValuesType":"","id":4,"condition":"IS_GREATER_THAN_OR_EQUAL_TO","valuesRange":{},"rangeSelectionToggole":true},{"values":["2020-12-31"],"mode":"auto","dataType":"date","orderBy":"","valuesMode":"auto","isFilterEditable":false,"encloseInQuotes":false,"dateTimeToggle":true,"databaseFunction":{},"label":"Weekend End Date","column":"PermanentVacanciesView.WeekEndDate","backendDataType":"java.sql.Date","rangeValuesType":"","id":5,"condition":"IS_LESS_THAN_OR_EQUAL_TO","valuesRange":{},"rangeSelectionToggole":true},{"values":["_all_"],"mode":"auto","dataType":"text","orderBy":"","valuesMode":"auto","isFilterEditable":false,"encloseInQuotes":false,"dateTimeToggle":false,"databaseFunction":{},"label":"Rooms","column":"PermanentVacanciesView.Rooms","backendDataType":"java.lang.String","rangeValuesType":"","id":5,"condition":"EQUALS","valuesRange":{},"rangeSelectionToggole":true}],"customFilterExpression":"('_all_' = '_all_') AND ('_all_' = '_all_') AND ${2} AND ${3} AND ('_all_' = '_all_')","customHavingExpression":"","customFilterExpressionObj":{"0":"('_all_' = '_all_')","1":"('_all_' = '_all_')","2":"${2}","3":"${3}","4":"('_all_' = '_all_')"},"customHavingExpressionObj":{},"havingExpressionIndexs":{},"filterExpressionIndexs":{"0":0,"1":24,"2":24,"5":90,"6":34,"7":58,"8":82},"options":{"limitBy":"full","prependTableNameToAlias":false},"visualisation":{"type":"VF","chartGroup":["C3","C3Axis","C3Bar"],"selectedType":"VF","settings":{"vf_file":"GroupedBarChart.efwvf","vf_id":1,"dir":"StackedBar","__path":"/StackedBar/GroupedBarChart.efwvf/Grouped Bar Chart (1)","script":"(function(data, chartElement){\n                \t\t\n\t\t\t\t\n                  if(data.length == 0)\n\t\t\t\t\t{\n\t\t\t\t\t\t$('#chart_1').html(\"<div><h2 style='text-align:CENTER;color:#927333; padding: 92px;'>No Data To Display<\/h2><\/div>\");\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\telse{\n\t\t\t\t\t\t\n\t\t\t\t\t\t\tvar textColumnName = [], numericColumnName = [];\n\t\t\t\t\t\t\tvar metadata = __hi_result.metadata[0];\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tfor(var i = 1; i<= Object.keys(metadata).length; i++){\n\t\t\t\t\t\t\tif(metadata[i]['type'] == 'text' || metadata[i]['type'] == 'dateTime' || metadata[i]['type'] == 'time' || metadata[i]['type'] == 'date'){\n\t\t\t\t\t\t\t\ttextColumnName.push(metadata[i]['name']);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif(metadata[i]['type'] == 'numeric'){\n\t\t\t\t\t\t\t\tnumericColumnName.push(metadata[i]['name']);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\t\tvar manager_names = [];\n\t\t\t\t\t\t\tvar unique_names = [];\n\t\t\t\t\t\t\tvar final_obj = {};\n\t\t\t\t\t\t\tvar final_array = [];\n\t\t\t\t\t\t\tvar job_titles = [];\n\t\t\t\t\t\t\tvar unique_jobtitles = [];\n\t\t\t\t\t\t\tvar textColumnNameLength = textColumnName.length - 1;\n\t\t\t\t\t\t\tvar textColumnNameLengthMinusOne = textColumnName.length - 2;\n\t\t\t\t\t\t\tvar lastMeasureValue = numericColumnName.length - 1;\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tfor(var i=0;i<data.length;i++)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t  manager_names.push(data[i][textColumnName[textColumnNameLengthMinusOne]]);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tfor(var i=0;i<data.length;i++)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t  job_titles.push(data[i][textColumnName[textColumnNameLength]]);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t$.each(manager_names, function(i, el){\n\t\t\t\t\t\t\tif($.inArray(el, unique_names) === -1) unique_names.push(el);\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t$.each(job_titles, function(i, el){\n\t\t\t\t\t\t\tif($.inArray(el, unique_jobtitles) === -1) unique_jobtitles.push(el);\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tfor(var i=0;i<unique_names.length;i++)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t final_obj.dimension = unique_names[i];\n\t\t\t\t\t\t\t\t final_array.push(final_obj)\n\t\t\t\t\t\t\t\t final_obj = {};\t\t\t\t\t\t \n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tfor(var i=0;i<data.length;i++)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t   var Category = data[i][textColumnName[textColumnNameLength]]\n\t\t\t\t\t\t\t   var final_arr_index = unique_names.indexOf(data[i][textColumnName[textColumnNameLengthMinusOne]])\n\t\t\t\t\t\t\t   final_array[final_arr_index][Category] = data[i][numericColumnName[lastMeasureValue]]\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tfunction stackFormatData2PercentageStackFormatData(stackFormatData){\n\t\t\t\t\t\t\t\t\tvar stackFormatDataLength = stackFormatData.length;\n\t\t\t\t\t\t\t\t\tvar rowWiseTotalArray = new Array();\n\t\t\t\t\t\t\t\t\tfor(var stackFormatDataIter = 0; stackFormatDataIter < stackFormatDataLength; stackFormatDataIter++){\n\t\t\t\t\t\t\t\t\t\tvar tempTotal = 0;\n\t\t\t\t\t\t\t\t\t\tvar stackKeys = Object.keys(stackFormatData[stackFormatDataIter]);\n\t\t\t\t\t\t\t\t\t\tfor(var stackKeysIter = 0; stackKeysIter < stackKeys.length; stackKeysIter++){\n\t\t\t\t\t\t\t\t\t\t\tif(stackKeys[stackKeysIter] !== 'dimension'){\n\t\t\t\t\t\t\t\t\t\t\t\ttempTotal = tempTotal + stackFormatData[stackFormatDataIter][stackKeys[stackKeysIter]];\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\trowWiseTotalArray.push(tempTotal);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tfor(var stackFormatDataIter = 0; stackFormatDataIter < stackFormatDataLength; stackFormatDataIter++){\n\t\t\t\t\t\t//\t\t\t\tvar tempRow = stackFormatData[stackFormatDataIter];\n\t\t\t\t\t\t\t\t\t\tvar stackKeys = Object.keys(stackFormatData[stackFormatDataIter]);\n\t\t\t\t\t\t\t\t\t\tfor(var stackKeysIter = 0; stackKeysIter < stackKeys.length; stackKeysIter++){\n\t\t\t\t\t\t\t\t\t\t\tif(stackKeys[stackKeysIter] !== 'dimension'){\n\t\t\t\t\t\t\t\t\t\t\t\tstackFormatData[stackFormatDataIter][stackKeys[stackKeysIter]] = (stackFormatData[stackFormatDataIter][stackKeys[stackKeysIter]]/rowWiseTotalArray[stackFormatDataIter])*100;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\treturn stackFormatData;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif((textColumnName.length >=2) && (numericColumnName.length >= 1)){\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tvar chart = c3.generate({\n\t\t\t\t\t\t\tbindto: '#chart_1',\n\t\t\t\t\t\t\tdata: {\n\t\t\t\t\t\t\t\tjson:final_array,\n\t\t\t\t\t\t\t\ttype : 'bar',\n\t\t\t\t\t\t\t\tkeys:{\n\t\t\t\t\t\t\t\tx:'dimension', //Columns Names\n\t\t\t\t\t\t\t\tvalue:unique_jobtitles, //Columns Names\n\t\t\t\t\t\t\t\t}, \t\t\t\t\t\t\t\n\t\t\t\t\t\t\t  labels: false\n\t\t\t\t\t\t\t  \n\t\t\t\t\t\t\t // groups:[unique_jobtitles]\n\t\t\t\t\t\t\t \n\t\t\t\t\t\t\t},\n\t\t\n\t\t\t\t\t\t\tlegend: {\n\t\t\t\t\t\t\t\tshow: true,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tpadding: {\n\t\t\t\t\t\t\t\t\t\tright: 50\n\t\t\t\t\t\t\t\t\t},\n\t\t\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\taxis: {\n\t\t\t\t\t\t\t// rotated : true,\n\t\t\t\t\t\t\tx: {\n\t\t\t\t\t\t\t\t\t\ttype: 'category',\n\t\t\t\t\t\t\t\t\t\ttick: {\n\t\t\t\t\t\t\t\t\t\t\trotate: 0,\n\t\t\t\t\t\t\t\t\t\t\tmultiline: true\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t   } ,\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tcolor :{\n\t\t\t\t\t\t\t\tpattern:[\"#34BFA3\",\"#FD3995\",\"#A2ACBD\",\"#DA91E1\",\"#00D4EF\",\"#FFAD52\",\"#00A8FF\",\"#ff5b78\",\"#007977\",\"#4A4453\",\"#4C2DA8\"]\n\t\t\t\t\t\t\t},\n\n\t\t\t\t\t\t\tgrid: {\n\t\t\t\t\t\t\t\tx: {\n\t\t\t\t\t\t\t\t\tshow: false\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\ty: {\n\t\t\t\t\t\t\t\t\tshow: false\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}); \n\t\t\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\telse if((textColumnName.length == 1) || (numericColumnName.length < 1)){\n\t\t\t\t\t\t\talert(\"Error : This chart requires at least 2 dimensions and 1 measure\");\n\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t\n\t\t\t})(window.data)","type":"VF"},"vizSelectedScripts":[]},"scripts":[],"styles":"","customStyles":"","customScripts":[]}]]></state>
    <security>
        <createdBy>1</createdBy>
        <organization></organization>
    </security>
</report>
