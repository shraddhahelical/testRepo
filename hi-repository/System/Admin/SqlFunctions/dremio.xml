<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<!-- Return type for each function node can be the following 

	"numeric", "text", "date", "time","dateTime","boolean","other" 
	
	-->
	<functions dialect="com.helicalinsight.adhoc.genericsql.DremioSqlDialect" type="sql">
	<!-- numeric functions start (standard)-->
	 <function group="numeric" returns="numeric">
        <key>sql.numeric.abs</key>
        <value>ABS</value>
        <signature><![CDATA[abs(${number})]]></signature>
        <parameters>
            <parameter column="true" name="number"/>
        </parameters>
        <description>It returns the absolute value of a number. Example: abs(-24)Result: 24</description>
    </function>
	
	<function group="numeric" returns="numeric">
        <key>sql.numeric.acos</key>
        <value>ACOS</value>
        <signature><![CDATA[acos(${number})]]></signature>
        <parameters>
            <parameter column="true" name="number"/>
        </parameters>
        <description>Returns the arc cosine of number. Example: acos(0.25) result: 1.318116071652818 </description>
    </function>
	
	<function group="numeric" returns="numeric">
        <key>sql.numeric.asin</key>
        <value>ASIN</value>
        <signature><![CDATA[asin(${number})]]></signature>
        <parameters>
            <parameter column="true" name="number"/>
        </parameters>
        <description>Returns the arc sine of number. Example: asin(0.25) result: 0.25268025514207865 </description>
    </function>
	<function group="numeric" returns="numeric">
        <key>sql.numeric.atan</key>
        <value>ATAN</value>
        <signature><![CDATA[atan(${number})]]></signature>
        <parameters>
            <parameter column="true" name="number"/>
        </parameters>
        <description>Returns the arc tangent of number. Example: atan(0.25) result: 0.24497866312686414 </description>
    </function>
	<function group="numeric" returns="numeric">
        <key>sql.numeric.atan2</key>
        <value>ATAN2</value>
        <signature><![CDATA[atan2(${number1},${number2})]]></signature>
        <parameters>
            <parameter column="true" name="number1"/>
			<parameter column="true" name="number2"/>
        </parameters>
        <description>Returns the arc tangent of given number. Example: atan2(0.50,1) result: 0.4636476090008061</description>
    </function>
	
    <function group="numeric" returns="numeric">
        <key>sql.numeric.round</key>
        <value>ROUND</value>
        <signature><![CDATA[round(${number}, ${decimalpoint})]]></signature>
        <parameters>
            <parameter column="true" name="number"/>
            <parameter defaultValue="1" name="decimalpoint"/>
        </parameters>
        <description>Displays a value rounded to a certain number of decimal places(decimalpoint). Example: round(34.4158,2) result: 34.42</description>
    </function>

    <function group="numeric" returns="numeric">
        <key>sql.numeric.ceiling</key>
        <value>CEILING</value>
        <signature><![CDATA[ceiling(${number})]]></signature>
        <parameters>
            <parameter column="true" name="number"/>
        </parameters>
        <description>Returns number rounded up to the nearest integer. Example: ceiling(0.25) result: 1 </description>
    </function>

	<function group="numeric" returns="numeric">
        <key>sql.numeric.cos</key>
        <value>COS</value>
        <signature><![CDATA[cos(${number})]]></signature>
        <parameters>
            <parameter column="true" name="number"/>
        </parameters>
        <description>Returns the cosine of number. Example: cos(0.25) result: 0.9689124217106447 </description>
    </function>
	
	<function group="numeric" returns="numeric">
        <key>sql.numeric.cot</key>
        <value>COT</value>
        <signature><![CDATA[1/tan(${number})]]></signature>
        <parameters>
            <parameter column="true" name="number"/>
        </parameters>
        <description>Returns the cotangent of an angle. Specify the angle in radians. Example: 1/tan(0.25) result: 3.9163173646459399 </description>
    </function>
	
	<function group="numeric" returns="numeric">
        <key>sql.numeric.degrees</key>
        <value>DEGREES</value>
        <signature><![CDATA[degrees(${number})]]></signature>
        <parameters>
            <parameter column="true" name="number"/>
        </parameters>
        <description>Converts angle number in radians to degrees. Example: degrees(0.25) result: 14.32394487827058</description>
    </function>
	
	<function group="numeric" returns="numeric">
        <key>sql.numeric.div</key>
        <value>DIV</value>
        <signature><![CDATA[(${dividend} / NULLIF(${divisor}, 0))]]></signature>
        <parameters>
            <parameter column="true" name="divisor"/>
            <parameter column="true" name="dividend"/>
        </parameters>
        <description>Returns the integer part of a division operation. Example: (10/5) result: 2</description>
    </function>
	
	<function group="numeric" returns="numeric">
        <key>sql.numeric.exp</key>
        <value>EXP</value>
        <signature><![CDATA[exp(${number})]]></signature>
        <parameters>
            <parameter column="true" name="number"/>
        </parameters>
        <description>Returns Eulerâ€™s number raised to the power of the given number. Example: exp(2) result: 7.389</description>
    </function>
	
    <function group="numeric" returns="numeric">
        <key>sql.numeric.floor</key>
        <value>FLOOR</value>
        <signature><![CDATA[floor(${number})]]></signature>
        <parameters>
            <parameter column="true"  name="number"/>
        </parameters>
        <description>Returns number rounded down to the nearest number. Example: floor(3.1415) result: 3 </description>
    </function>
	
		<function group="numeric" returns="numeric">
        <key>sql.numeric.ln</key>
        <value>LN</value>
        <signature><![CDATA[ln(${number})]]></signature>
        <parameters>
            <parameter column="true" name="number"/>
        </parameters>
        <description>Returns the natural logarithm of number. Example: ln(2) result: 0.6931471805599453 </description>
    </function>
	<function group="numeric" returns="numeric">
        <key>sql.numeric.log</key>
        <value>LOG</value>
        <signature><![CDATA[log10(${number})]]></signature>
        <parameters>
            <parameter column="true" name="number"/>
        </parameters>
        <description>Returns the base 10 logarithm of number. Example: log10(2) result: 0.3010299956639812 </description>
    </function>
	<function group="numeric" returns="numeric">
        <key>sql.numeric.max</key>
        <value>MAX</value>
        <signature><![CDATA[greatest(${number1},${number2})]]></signature>
        <parameters>
            <parameter column="true" name="number1"/>
            <parameter column="true" name="number2"/>
        </parameters>
        <description>Returns the largest of the provided values. Example: greatest(4,13) result: 13</description>
    </function>
	<function group="numeric" returns="numeric">
        <key>sql.numeric.min</key>
        <value>MIN</value>
        <signature><![CDATA[least(${number1},${number2})]]></signature>
        <parameters>
            <parameter column="true" name="number1"/>
            <parameter column="true" name="number2"/>
        </parameters>
        <description>Returns the smallest of the provided values. Example: least(13,4) result: 4</description>
    </function>
	<function group="numeric" returns="numeric">
        <key>sql.numeric.pi</key>
        <value>PI</value>
        <signature><![CDATA[(pi)]]></signature>
        <parameters/>
        <description>Returns the constant Pi. Example: pi result: 3.14159 </description>
    </function>

	<function group="numeric" returns="numeric">
        <key>sql.numeric.sign</key>
        <value>SIGN</value>
        <signature><![CDATA[sign(${number})]]></signature>
        <parameters>
            <parameter column="true" name="number"/>
        </parameters>
        <description>Returns the signum function of number, that is:
		0 if the argument is 0,
		1 if the argument is greater than 0,
		-1 if the argument is less than 0. Example: sign(0.5) result: 1.</description>
    </function>
	<function group="numeric" returns="numeric">
        <key>sql.numeric.sin</key>
        <value>SIN</value>
        <signature><![CDATA[sin(${number})]]></signature>
        <parameters>
            <parameter column="true" name="number"/>
        </parameters>
        <description>Returns the sine of number. Example: sin(0.25) result: 0.24740395925452294</description>
    </function>
	
    <function group="numeric" returns="numeric">
        <key>sql.numeric.pow</key>
        <value>POWER</value>
        <signature><![CDATA[pow(${number},${exponent})]]></signature>
        <parameters>
            <parameter column="true" name="number"/>
            <parameter defaultValue="10" name="exponent"/>
        </parameters>
        <description>Displays the value of a number raised to the power of another number. Example: power(4,2) result: 16</description>
    </function>   

    <function group="numeric" returns="numeric">
        <key>sql.numeric.radians</key>
        <value>RADIANS</value>
        <signature><![CDATA[radians(${number})]]></signature>
        <parameters>
            <parameter column="true" name="number"/>
        </parameters>
        <description>Converts the value of a number from degrees to radians. Example : radians(4) result : 0.06981317007977318</description>
    </function>

    <function group="numeric" returns="numeric">
        <key>sql.numeric.sqrt</key>
        <value>SQRT</value>
        <signature><![CDATA[sqrt(${number})]]></signature>
        <parameters>
            <parameter column="true" name="number"/>
        </parameters>
        <description>Displays the square root of a non-negative number. Example: sqrt(5) result: 2.23606797749979</description>
    </function>

	<function group="numeric" returns="numeric">
        <key>sql.numeric.square</key>
        <value>SQUARE</value>
        <signature><![CDATA[(${number} * ${number})]]></signature>
        <parameters>
            <parameter column="true" name="number"/>
        </parameters>
        <description>It displays the square of a given number. Example: 12 * 12 result: 144</description>
    </function>
	
	<function group="numeric" returns="numeric">
        <key>sql.numeric.tan</key>
        <value>TAN</value>
        <signature><![CDATA[tan(${number})]]></signature>
        <parameters>
            <parameter column="true" name="number"/>
        </parameters>
        <description>Returns the tangent of number. Example: tan(0.25) result: 0.25534192122103627 </description>
    </function>
	
    <function group="numeric" returns="numeric">
        <key>sql.numeric.truncate</key>
        <value>TRUNCATE</value>
        <signature><![CDATA[truncate(${number},${digit})]]></signature>
        <parameters>
            <parameter column="true" defaultValue="0" name="number"/>
            <parameter defaultValue="10" name="digit"/>
        </parameters>
        <description>Displays a number truncated to a certain number of decimal places. Example: truncate(1.289,2) result: 1.28</description>
    </function>

	<!-- numeric functions end (standard)-->
	
	<!-- text functions start (standard)-->
	
	
    <function group="text" returns="numeric" >
        <key>sql.text.ascii</key>
        <value>ASCII</value>
        <signature><![CDATA[ascii(${string})]]></signature>
        <parameters>
            <parameter column="true" name="string" defaultValue="'A'"/>
        </parameters>
        <description>Returns the Unicode of the first character of string. Example: ASCII('A') result:65</description>
    </function>
	
	<function group="text" returns="text" >
        <key>sql.text.char</key>
        <value>CHAR</value>
        <signature><![CDATA[chr(${number})]]></signature>
        <parameters>
            <parameter column="true" name="number" defaultValue="65"/>
        </parameters>
        <description>Returns the character encoded by the ASCII code. Example:chr(65) result:A </description>
    </function>

    <function group="text" returns="numeric">
        <key>sql.text.bitLength</key>
        <value>LENGTH</value>
        <signature><![CDATA[length(${string})]]></signature>
        <parameters>
            <parameter column="true" name="string"/>
        </parameters>
        <description>Returns the number of characters in string. Example : LENGTH('Bengaluru') result:9  </description>
    </function>

    <function group="text" returns="text">
        <key>sql.text.lower</key>
        <value>LOWER</value>
        <signature><![CDATA[lower(${string})]]></signature>
        <parameters>
            <parameter column="true" name="string"/>
        </parameters>
        <description>Converts all characters in the specified string to lowercase. Example:  LOWER('BENGALURU') result: bengaluru</description>
    </function>

    <function group="text" returns="text">
        <key>sql.text.upper</key>
        <value>UPPER</value>
        <signature><![CDATA[upper(${string})]]></signature>
        <parameters>
            <parameter column="true" name="string"/>
        </parameters>
        <description>Converts all characters in a string to uppercase. Example: UPPER('bengaluru') result: BENGALURU.</description>
    </function>

    <function group="text" returns="text">
        <key>sql.text.trim</key>
        <value>TRIM</value>
        <signature><![CDATA[trim(${string})]]></signature>
        <parameters>
            <parameter column="true" name="string"/>
        </parameters>
        <description>It removes leading and trailing whitespace from string. Example: TRIM('   Bengaluru   ') result:Bengaluru
        </description>
    </function>

    <function group="text" returns="text">
        <key>sql.text.ltrim</key>
        <value>LTRIM</value>
        <signature><![CDATA[ltrim(${string})]]></signature>
        <parameters>
            <parameter column="true" name="string"/>
        </parameters>
        <description>Removes leading whitespace from string. Example: LTRIM('     Bengaluru') result: Bengaluru</description>
    </function>
	
	 <function group="text" returns="text">
        <key>sql.text.rtrim</key>
        <value>RTRIM</value>
        <signature><![CDATA[rtrim(${string})]]></signature>
        <parameters>
            <parameter column="true" name="string"/>
        </parameters>
        <description>Removes trailing whitespace from string. Example: RTRIM('Bengaluru   ') result: Bengaluru.
        </description>
    </function>
	
	<function group="text" returns="text">
        <key>sql.text.space</key>
        <value>SPACE</value>
        <signature><![CDATA[space(${noOfSpace})]]></signature>
        <parameters>
            <parameter column="true" name="noOfSpace"/>
        </parameters>
        <description>Returns a string consisting of space characters. Example: space(6) result:   .
        </description>
    </function>
	
	<function group="text" returns="text">
        <key>sql.text.mid</key>
        <value>MID</value>
        <signature><![CDATA[substr(${string},${position},${length})]]></signature>
        <parameters>
            <parameter column="true" name="string"/>
			<parameter column="true" name="position"/>
			<parameter column="true" name="length"/>
        </parameters>
        <description>Returns the string starting from specified position. If position is more than string or length is less than 1 it will return empty string. Example: substr('Bengaluru', 2, 5) result: engal</description>
    </function>
	
	<function group="text" returns="text">
        <key>sql.text.replace</key>
        <value>REPLACE</value>
        <signature><![CDATA[replace(${string},${substring},${replacestring})]]></signature>
        <parameters>
            <parameter column="true" name="string"/>
			<parameter column="true" name="substring"/>
			<parameter column="true" name="replacestring"/>
        </parameters>
        <description>String search for substring and replace it with replacestring. If substring is not found, the string is not changed. Example: REPLACE('bengaluru','b','Z') result: zengaluru</description>
    </function>
     <function group="text" returns="text">
        <key>sql.text.right</key>
        <value>RIGHT</value>
        <signature><![CDATA[("RIGHT"(${string},${length}))]]></signature>
        <parameters>
            <parameter column="true" name="string"/>
			<parameter column="true" name="length"/>
        </parameters>
        <description>Returns the rightmost character from the string. Example: "RIGHT"('hyderabad',3) result: bad</description>
    </function>

  

    <function group="text" returns="text">
        <key>sql.text.lpad</key>
        <value>LPAD</value>
        <signature><![CDATA[lpad(${string},${length},${padString})]]></signature>
        <parameters>
            <parameter column="true" name="string"/>
            <parameter defaultValue="0" name="length"/>
            <parameter column="true" name="padString"/>
        </parameters>
        <description>Displays a string that is left padded with a specified string to a certain length. If length is less than string, return value is truncated to length characters. Example: LPAD('Wellesley', 14,'Hills') result:HillsWellesley. </description>
    </function>
	
	<function group="text" returns="text">
        <key>sql.text.left</key>
        <value>LEFT</value>
        <signature><![CDATA[("LEFT"(${string},${length}))]]></signature>
        <parameters>
            <parameter column="true" name="string"/>
            <parameter defaultValue="0" name="length"/>
        </parameters>
        <description>Returns the left most characters in a string. Example: "LEFT"('Bengaluru',4) result:Beng. </description>
    </function>
	
	<function group="text" returns="numeric">
        <key>sql.text.find</key>
        <value>FIND</value>
        <signature><![CDATA[strpos(${string}, ${substring})]]></signature>
        <parameters>
		    <parameter column="true" name="string"/>
            <parameter column="true" name="substring"/>
        </parameters>
        <description>Returns the starting position of the first instance of substring in string. Positions start with 1. If not found, 0 is returned. Example :strpos('Bengaluru','z') result : 0, strpos('Bengaluru','aluru') result : 5</description>
    </function>
	
	<function group="text" returns="boolean">
        <key>sql.text.endswith</key>
        <value>ENDSWITH</value>
        <signature><![CDATA[case when(${string} like concat('%',${substring})) then true else false end]]></signature>
        <parameters>
            <parameter column="true" name="string"/>
            <parameter column="true" name="substring"/>
        </parameters>
        <description>Returns true if the given string endswith specified substring. Example:case when('postgres' like concat('%','res')) then true else false end result: true. Note:Please provide single quotes if you are directly typing the substring value.</description>
    </function>
	
	<function group="text" returns="boolean">
        <key>sql.text.startswith</key>
        <value>STARTSWITH</value>
        <signature><![CDATA[case when(${string} like concat(${substring},'%')) then true else false end]]></signature>
        <parameters>
            <parameter column="true" name="string"/>
            <parameter column="true" name="substring"/>
        </parameters>
        <description>Returns true if string starts with substring. Example: case when('bengaluru' like concat('ben','%')) then true else false end result: true.  Note:Please provide single quotes if you are directly typing the substring value.</description>
    </function>
	
	<function group="text" returns="numeric">
        <key>sql.text.findnth</key>
        <value>FINDNTH</value>
        <signature><![CDATA[(case when (instr(${string},SUBSTRING_INDEX(${string}, ${substring}, ${th_appeareance}))+length(substring_index(${string},${substring},${th_appeareance}))) <= length(${string})
     then  (instr(${string},SUBSTRING_INDEX(${string}, ${substring}, ${th_appeareance}))+length(substring_index(${string},${substring},${th_appeareance})))
     else -1 end)]]></signature>
        <parameters>
			<parameter column="true" name="string"/>
			<parameter column="true" name="substring"/>
			<parameter column="true" name="th_appeareance" defaultValue="2" type="numeric"/>
        </parameters>
        <description>Returns the position of the th_appeareance of substring within the specified string, where n is defined by the occurrence argument. Example : instr('calculation',SUBSTRING_INDEX('Calculation', 'c', 2))+length(substring_index('calculation','c',2)) result : 4</description>
    </function>
	
	<function group="text" returns="text">
        <key>sql.text.split</key>
        <value>SPLIT</value>
        <signature><![CDATA[SPLIT_PART(${string},${delimiter},${index})]]></signature>
        <parameters>
			<parameter column="true" name="string"/>
			<parameter column="true" name="delimiter"/>
			<parameter column="true" name="index"/>
        </parameters>
        <description>Splits string on delimiter and returns the field index. Field indexes start with 1. If the index is larger than the number of fields, then empty will return Example : SPLIT_PART('Singa$Pore$Benga$Luru', '$', 2) result : Pore</description>
    </function>
	
	<function group="text" returns="boolean">
        <key>sql.text.contains</key>
        <value>CONTAINS</value>
        <signature><![CDATA[(case when position(${substring} IN ${string})> 0 then true else false end)]]></signature>
        <parameters>
            <parameter column="true" name="substring"/>
			<parameter column="true" name="string"/>
        </parameters>
        <description> Returns true if the given string contains the specified substring. Example :(case when position('luru' In 'bengaluru') >0 then true else false end )result:true</description>
    </function>
	
	
	<function group="text" returns="text">
        <key>sql.text.rpad</key>
        <value>RPAD</value>
        <signature><![CDATA[rpad(${string},${length},${padString})]]></signature>
        <parameters>
            <parameter column="true" name="string"/>
            <parameter defaultValue="0" name="length"/>
            <parameter column="true" name="padString"/>
        </parameters>
        <description>Displays a string that is right padded with a specified string to a certain length. If length is less than string, return value is truncated to length characters.Length must not be negative and padString must not be non-empty. Example:RPAD('Wellesley', 15, 'Hills') result : Wellesley Hills . </description>
    </function>
	<function group="text" returns="text">
        <key>sql.text.reverse</key>
        <value>REVERSE</value>
        <signature><![CDATA[reverse(${string})]]></signature>
        <parameters>
            <parameter column="true" name="string"/>
        </parameters>
        <description>Returns string with the characters in reverse order. Example: REVERSE('Bengaluru')  result : urulagneB </description>
    </function>
	

    <function group="text" returns="text">
        <key>sql.text.concat</key>
        <value>CONCAT</value>
        <signature><![CDATA[concat(${string1},${string2})]]></signature>
        <parameters>
            <parameter column="true" name="string1"/>
            <parameter column="true" name="string2"/>
        </parameters>
        <description>Returns the concatenation of string1, string2. Example: CONCAT('Beng','aluru') result : Bengaluru</description>
    </function>

	<!-- text functions end (standard)-->
	
	
	<!-- date/dateTime functions start (standard)-->
	<function group="date" returns="date">
        <key>sql.date.dateadd</key>
        <value>DATEADD</value>
        <signature><![CDATA[CAST(DATE_ADD(${date}, interval ${value} ${unit}) AS DATE)]]></signature>
        <parameters>
            <parameter column="true" name="date" defaultValue="date '2014-03-08'"/>
			<parameter  name="value" defaultValue="'2'"/>
			<parameter  name="unit" defaultValue="month"/>
        </parameters>
          <description>Returns the specified date with the specified number of interval added to the specified unit of that date.Example: CAST(DATE_ADD(date '2014-03-08', interval '2'  year) AS DATE) result:2016-03-08 supported units:day, month, year.</description>
		  </function>
   <function group="date" returns="numeric">
        <key>sql.date.datediff</key>
        <value>DATEDIFF</value>
        <signature><![CDATA[(DATE_PART(${unit}, ${date1}) - DATE_PART(${unit}, ${date2}))]]></signature>
        <parameters>
            <parameter column="true" name="unit" defaultValue="'year'"/>
            <parameter column="true" name="date1" defaultValue="date '2014-03-08'"/>
			<parameter column="true" name="date2" defaultValue="date '2019-03-08'"/>
        </parameters>
        <description>Returns the difference between date1 and date2 expressed in terms of unit. Example: (DATE_PART('year', date '2019-03-08') - DATE_PART('year', date '2014-03-08')) result: 5 </description>
    </function>
    <function group="date" returns="numeric">
        <key>sql.date.datepart</key>
        <value>DATEPART</value>
        <signature><![CDATA[extract(${unit} from ${date})]]></signature>
        <parameters>
            <parameter column="true" name="unit" defaultValue="year"/>
			<parameter column="true" name="date" defaultValue="date '2014-03-08'"/>
        </parameters>
        <description>Returns an integer that represents the specified datepart of the specified date. Example: extract(year FROM date '2014-03-08') result: 2014. supported unit:YEAR, MONTH,DAY. NOTE:This function with literal(default values) values will not work in group by but will work for column.</description>
    </function>
	<function group="date" returns="date">
        <key>sql.date.datetrunc</key>
        <value>DATETRUNC</value>
        <signature><![CDATA[DATE_TRUNC(${unit},${date})]]></signature>
        <parameters>
            <parameter column="true" name="unit" defaultValue="'year'"/>
            <parameter column="true" name="date" defaultValue="date '2014-03-08'"/>
        </parameters>
        <description>Truncates the specified date to the accuracy specified by the unit. Example: date_trunc('year', date '2014-03-08'). result:2014-01-01 00:00:00.000. NOTE: This function with literal date (default value) gives inappropriate result (works fine with date column)</description>
    </function>
   <function group="date" returns="date">
        <key>sql.date.makedate</key>
        <value>MAKEDATE</value>
        <signature><![CDATA[case 
     when length(${year}) <> 0 OR length(${month}) <> 0 OR length(${day}) <> 0
	then cast(concat(${year},'-',${month},'-',${day}) AS date)
	else null end]]></signature>
        <parameters>
            <parameter column="true" name="year" defaultValue="2019"/>
			<parameter column="true" name="month" defaultValue="09"/>
			<parameter column="true" name="day" defaultValue="18"/>
        </parameters>
        <description>Returns a date for given year, month and day. Example:  case 
     when length('2013') != 0 OR length('07') != 0 OR length('15') != 0
	then cast(concat('2013','-','07','-','15') AS date )
	else null end result : 2013-07-15 Note : Replace != with "GreaterThan LessThan" symbols.NOTE:This function is having issue from dremio side.</description>
    </function>
    <function group="date" returns="date">
        <key>sql.date.today</key>
        <value>TODAY</value>
        <signature><![CDATA[(current_date)]]></signature>
        <parameters/>
        <description>Displays Current date.</description>
    </function>
 
    <function group="dateTime" returns="dateTime">
        <key>sql.dateTime.datetimeadd</key>
        <value>DATETIMEADD</value>
        <signature><![CDATA[CAST(DATE_ADD(${datetime}, interval ${value} ${unit}) AS timestamp)]]></signature>
        <parameters>
		       <parameter column="true" name="datetime" defaultValue="timestamp '2014-03-08 09:07:20'"/>
               <parameter column="true" name="value" defaultValue="'2'" type="numeric"/>
			   <parameter column="true" name="unit" defaultValue="year"/>
        </parameters>
        <description>Returns the specified date with the specified number of interval added to the specified date_part of that date.Example:cast(timestamp '2019-08-03 10:00:00.123'  Interval '2' year)as timestamp) result:2019-08-03 15:00:00.123000 supported units:day,month,year,hour,minute,second.</description>
    </function>
     <function group="dateTime" returns="numeric">
        <key>sql.dateTime.datetimediff</key>
        <value>DATETIMEDIFF</value>
        <signature><![CDATA[(DATE_PART(${unit}, ${datetime1}) - DATE_PART(${unit}, ${datetime2}))]]></signature>
        <parameters>
            <parameter column="true" name="unit" defaultValue="'year'"/>
            <parameter column="true" name="datetime1" defaultValue="timestamp '2019-03-08 10:12:12'"/>
			<parameter column="true" name="datetime2" defaultValue="timestamp '2011-03-08 11:22:33'"/>
        </parameters>
        <description>Returns the difference between dateTime and dateTime2 expressed in terms of unit. Example:(DATE_PART('year', timestamp '2014-03-08 12:20:25 - DATE_PART('year', timestamp '2014-03-08 12:20:25')) result: 4 supported units: second, minute , hour , day , month , year.NOTE:This function will not work on group by if use literal timestamp values, will work with columns.</description>
    </function>
	<function group="dateTime" returns="numeric">
        <key>sql.dateTime.datetimepart</key>
        <value>DATETIMEPART</value>
        <signature><![CDATA[extract(${unit} from ${datetime})]]></signature>
        <parameters>
            <parameter column="true" name="unit" defaultValue="year"/>
			<parameter column="true" name="datetime" defaultValue=" timestamp '2014-03-08 12:02:34'"/>
        </parameters>
        <description>Returns an integer that represents the specified datepart of the specified date. Example: extract(year FROM timestamp '2014-03-08 12:11:20') result: 2014. supported date_part:YEAR, QUARTER, MONTH , DAY.</description>
    </function>
    <function group="dateTime" returns="dateTime">
        <key>sql.dateTime.datetimetrunc</key>
        <value>DATETIMETRUNC</value>
         <signature><![CDATA[DATE_TRUNC(${unit}, ${datetime})]]></signature>
        <parameters>
            <parameter column="true" name="unit" defaultValue="'minute'"/>
            <parameter column="true" name="datetime" defaultValue="timestamp '2014-03-08 12:25:10'"/>
        </parameters>
        <description>Truncates the specified date to the accuracy specified by the unit. Example:date_trunc('minute', timestamp '2014-03-08 12:11:20') result: 2014-03-08 12:11:00.000000.</description>
    </function>
     <function group="dateTime" returns="numeric">
        <key>sql.dateTime.day</key>
        <value>DAY</value>
        <signature><![CDATA[extract(day from ${datetime})]]></signature>
        <parameters>
            <parameter column="true" name="datetime" defaultValue="timestamp '2014-03-08 09:00:00'"/>
        </parameters>
        <description>Returns day of the month for date/datetime.Example: extract(day from TIMESTAMP '2014-03-08 09:00:00') result: 8</description>
    </function>
     <function group="dateTime" returns="text">
        <key>sql.dateTime.dayname</key>
        <value>DAYNAME</value>
        <signature><![CDATA[TO_CHAR(${datetime}, 'DAY')]]></signature>
        <parameters>
            <parameter column="true" name="datetime" defaultValue="timestamp '2007-02-03 09:00:00'"/>
        </parameters>
        <description>Retruns the name of the week day for date/dateTime. Example: TO_CHAR(timestamp '2019-07-24 12:25:10', 'DAY') result: 'WEDNESDAY'</description>
    </function>
    <function group="dateTime" returns="numeric">
        <key>sql.dateTime.dayofweek</key>
        <value>DAYOFWEEK</value>
        <signature><![CDATA[cast(TO_CHAR(${datetime}, 'D') as int)]]></signature>
        <parameters>
            <parameter column="true" name="datetime" defaultValue="timestamp '2007-02-03 09:00:00'"/>
        </parameters>
        <description>Returns the ISO day of the week for date/datetime. The value ranges from 1 (SUNDAY) to 7 (SATURDAY). Example: cast(TO_CHAR(TIMESTAMP '2019-07-20 09:00:00','D')as int) result: 7</description>
    </function>

    <function group="dateTime" returns="text">
        <key>sql.dateTime.format</key>
        <value>FORMAT</value>
        <signature><![CDATA[TO_CHAR(${timestamp},'${format}')]]></signature>
        <parameters>
            <parameter column="true" name="timestamp" defaultValue="timestamp '2014-03-08 09:00:00'"/>
			<parameter column="true" name="format" defaultValue="YYYY/MM/DD HH:MI:SS"/>
        </parameters>
        <description>Return a TIMESTAMP format as a string.Example: TO_CHAR(TIMESTAMP '2019-07-20 09:10:20', 'YYYY/MM/DD HH:MI:SS') result:2019/07/20 09:10:20. Example2 : TO_CHAR(TIMESTAMP '2019-07-20 09:10:20', 'YYYY') result:2019.  Example3 :  TO_CHAR(TIMESTAMP '2019-07-20 09:10:20', 'YYYY-MM') result:2019-07. </description>
    </function>
	<function group="dateTime" returns="numeric">
        <key>sql.dateTime.hour</key>
        <value>HOUR</value>
        <signature><![CDATA[extract(HOUR FROM ${timestamp})]]></signature>
        <parameters>
            <parameter column="true" name="timestamp" defaultValue="timestamp '2014-03-08 09:00:00'"/>
        </parameters>
        <description>Returns HOUR from datetime.Example: extract(HOUR from TIMESTAMP '2014-03-08 09:00:00') result: 9</description>
    </function>
   <function group="dateTime" returns="dateTime">
        <key>sql.dateTime.makedatetime</key>
        <value>MAKEDATETIME</value>
        <signature><![CDATA[(case 
     when length(${year}) <> 0 OR length(${month}) <> 0 OR length(${day}) <> 0 OR length(${hour}) <> 0 OR length(${minute}) <> 0 OR length(${second}) <> 0
	then CAST(concat(${year},'-', ${month},'-',${day},' ', ${hour},':', ${minute},':', ${second}) as timestamp)
	else null end)]]></signature>
        <parameters>
            <parameter column="true" name="year" defaultValue="2013"/>
			<parameter column="true" name="month" defaultValue="7"/>
			<parameter column="true" name="day" defaultValue="15"/>
			<parameter column="true" name="hour" defaultValue="8"/>
			<parameter column="true" name="minute" defaultValue="15"/>
			<parameter column="true" name="second" defaultValue="23"/>
        </parameters>
        <description>Returns a datetime that combines a year,month,day,hour,minute,second. Example: case 
     when length('2013') greaterthanLessthan 0 OR length('07') greaterthanLessthan 0 OR length('15') greaterthanLessthan 0 OR length('08') greaterthanLessthan 0 OR length('15') greaterthanLessthan 0 OR length('23') greaterthanLessthan 0
	then CAST(concat('2013','-', '07','-','15',' ', '08',':', '15',':', '23') as timestamp)
	else null end result: 2013-7-15 8-15-23. Note : Replace greaterthanLessthan with greaterthanLessthan symbols.</description>
    </function>
	<function group="dateTime" returns="time">
        <key>sql.dateTime.maketime</key>
        <value>MAKETIME</value>
        <signature><![CDATA[(case 
     when length(${hour}) <> 0 OR length(${minute}) <> 0 OR length(${second}) <> 0
	 then CAST(concat(${hour},':',${minute},':',${second}) as TIME)
	 else null end)
	 ]]></signature>
        <parameters>
           <parameter column="true" name="hour" defaultValue="12"/>
			<parameter column="true" name="minute" defaultValue="30"/>
			<parameter column="true" name="second" defaultValue="40"/>
        </parameters>
        <description>Returns time value from the hour, minute and seconds.Example: case when length('12') greater than less than 0 OR length('30') greater than less than 0 OR length('40') greater than less than 0
	 then CAST(concat('12',':','30',':','40') as TIME) else null end 
	 Note : Replace greater than less than with greater than less than symbols result: 12:30:40  
	 </description>
    </function>
	 <function group="dateTime" returns="numeric">
        <key>sql.dateTime.millisecond</key>
        <value>MILLISECOND</value>
        <signature><![CDATA[cast(TO_CHAR(${datetime}, 'FFF')as int)]]></signature>
        <parameters>
            <parameter column="true" name="datetime" defaultValue="timestamp '2014-03-08 09:25:45.234'"/>
        </parameters>
        <description>Returns the millisecond for  second of the time. Example: cast(TO_CHAR(timestamp '2019-07-20 09:10:20.234', 'FFF')as int) result: 234</description>
    </function>
    <function group="dateTime" returns="numeric">
        <key>sql.dateTime.minute</key>
        <value>MINUTE</value>
        <signature><![CDATA[extract(minute from  ${datetime})]]></signature>
        <parameters>
            <parameter column="true" name="datetime" defaultValue="timestamp '2014-03-08 09:00:00'"/>
        </parameters>
        <description>Returns MINUTES from datetime.Example: extract(minute from  timestamp '2019-07-20 09:10:20.234') result: 10</description>
    </function>
	<function group="dateTime" returns="numeric">
        <key>sql.dateTime.month</key>
        <value>MONTH</value>
        <signature><![CDATA[extract(MONTH FROM ${datetime})]]></signature>
        <parameters>
            <parameter column="true" name="datetime" defaultValue="timestamp '2014-03-08 09:00:00'"/>
        </parameters>
        <description>Returns MONTH from date/datetime.Example: extract(MONTH from TIMESTAMP '2014-03-08 09:00:00') result: 3</description>
    </function>
    <function group="dateTime" returns="text">
        <key>sql.dateTime.monthname</key>
        <value>MONTHNAME</value>
        <signature><![CDATA[TO_CHAR(${datetime}, 'MONTH')]]></signature>
        <parameters>
            <parameter column="true" name="datetime" defaultValue="timestamp '2014-03-08 09:00:00'"/>
        </parameters>
        <description>Returns MONTHNAME from date/datetime.Example: TO_CHAR(TIMESTAMP '2014-03-08 09:00:00', 'MONTH') result: MARCH</description>
    </function>
    <function group="dateTime" returns="dateTime">
        <key>sql.dateTime.now</key>
        <value>NOW</value>
        <signature><![CDATA[(CURRENT_TIMESTAMP)]]></signature>
        <parameters/>
        <description>Displays Current date and time. </description>
    </function>
    <function group="dateTime" returns="dateTime">
        <key>sql.dateTime.parse</key>
        <value>PARSE</value>
        <signature><![CDATA[to_timestamp(${string},${format})]]></signature>
        <parameters>
            <parameter column="true" name="string" defaultValue="'2014-03-08 09:00:00'"/>
			<parameter column="true" name="format" defaultValue="'YYYY-MM-DD HH:MI:SS'"/>
        </parameters>
        <description>Takes a string as input and displays a timestamp. Example :to_timestamp('2014-03-08 09:00:00','YYYY-MM-DD HH:MI:SS')result :2014-03-08 09:00:00.000000. Example2:to_timestamp('2014-03-08 14:12:20.123','YYYY-MM-DD HH24:MI:SS.FFF') result:2014-03-08 14:12:20.123000</description>
    </function>
    <function group="dateTime" returns="numeric">
        <key>sql.dateTime.quarter</key>
        <value>QUARTER</value>
        <signature><![CDATA[extract(quarter from ${datetime})]]></signature>
        <parameters>
            <parameter column="true" name="datetime" defaultValue="timestamp '2014-03-08 12:20:19'"/>
        </parameters>
        <description>Returns the quarter of the year for date/dateTime. Example: extract(quarter timestamp '2014-03-08 09:00:00')result:1</description>
    </function>
    <function group="dateTime" returns="numeric">
        <key>sql.dateTime.second</key>
        <value>SECOND</value>
        <signature><![CDATA[extract(second from ${datetime})]]></signature>
        <parameters>
            <parameter column="true" name="datetime" defaultValue="timestamp '2014-03-08 09:00:00'"/>
        </parameters>
        <description>Returns SECONDS from datetime.Example: extract(second from  timestamp '2019-07-20 09:10:20') result: 20</description>
    </function>
    <function group="dateTime" returns="numeric">
        <key>sql.dateTime.week</key>
        <value>WEEK</value>
        <signature><![CDATA[cast(TO_CHAR(${datetime}, 'WW') as int)]]></signature>
        <parameters>
            <parameter column="true" name="datetime" defaultValue="timestamp '2014-03-08 12:20:19'"/>
        </parameters>
        <description>Returns the ISO week of the year for date/dateTime. The value ranges from 1 to 53 or 1 to 52. Example: cast(to_char(timestamp '2014-03-08 09:00:00','WW')as int) result: 10</description>
    </function>
    <function group="dateTime" returns="numeric">
        <key>sql.dateTime.year</key>
        <value>YEAR</value>
        <signature><![CDATA[extract(YEAR FROM ${datetime})]]></signature>
        <parameters>
            <parameter column="true" name="datetime" defaultValue="timestamp '2014-03-08 09:00:00'"/>
        </parameters>
        <description>Returns YEAR from date/datetime.Example: extract(YEAR from TIMESTAMP '2014-03-08 09:00:00') result: 2014</description>
    </function>
	<function group="date" returns="boolean">
        <key>sql.date.isdate</key>
        <value>ISDATE</value>
        <signature><![CDATA[ISDATE(${date})]]></signature>
        <parameters>
            <parameter column="true" name="date" defaultValue="'2016-12-21'"/>
       </parameters>
        <description>Returns true if a given date is a valid date otherwise returns false. Example:ISDATE('2016-12-21')result: true   </description>
    </function>

	
	<!-- date/dateTime functions end (standard)-->
	<!-- typeConversion functions start (standard)-->
	<!--  typeConversion functions  -->

<function group="type conversion" returns="text">
        <key>sql.typeConversion.cast</key>
        <value>CAST</value>
        <signature><![CDATA[CAST(${column} AS ${dataType})]]></signature>
        <parameters>
            <parameter column="true" name="column"/>
			<parameter column="false" name="dataType"/>
        </parameters>
        <description>Cast function converts one dataType to another dataType. Note:All Values should be in single quotes if you are typing the value.Example CAST('2019-03-22 17:34:03.000' AS char) result:2019-03-22 17:34:03.000</description>
    </function>
	
	<function group="type conversion" returns="text">
        <key>sql.typeConversion.tochar</key>
        <value>TOCHAR</value>
        <signature><![CDATA[cast(${column} as varchar)]]></signature>
        <parameters>
            <parameter column="true" name="column"/>
        </parameters>
        <description>This function is used to convert date,number,dateTime,time,interval to string. NOTE:field should be in single quotes if you are typing the string/data/dateTime/time/interval value.Example:cast(456 as varchar) result:'456'</description>
    </function>
	<function group="type conversion" returns="numeric">
        <key>sql.typeConversion.tonum</key>
        <value>TONUM</value>
        <signature><![CDATA[cast(${column} as int)]]></signature>
        <parameters>
            <parameter column="true" name="column"/>
			
        </parameters>
        <description>This function is used to convert character based integer value to integer type.(format is not required)Example:cast('456' as int) result:456</description>
    </function>
	<function group="type conversion" returns="numeric">
        <key>sql.typeConversion.todecimal</key>
        <value>TODECIMAL</value>
        <signature><![CDATA[cast(${column} as decimal)]]></signature>
        <parameters>
            <parameter column="true" name="column"/>
        </parameters>
        <description>This function is used to convert character based decimal value to decimal type.(format is not required)Example:CAST('456.34' as DECIMAL)) result:456.34</description>
    </function>
	<function group="type conversion" returns="date">
        <key>sql.typeConversion.todate</key>
        <value>TODATE</value>
        <signature><![CDATA[CAST(${column} as DATE)]]></signature>
        <parameters>
            <parameter column="true" name="column"/>
        </parameters>
        <description>This function is used to convert character based date value to date type.(format is not required).Example:CAST('2018-08-30' as DATE)) result:2018-08-30</description>
    </function>
	<function group="type conversion" returns="dateTime">
        <key>sql.typeConversion.todatetime</key>
        <value>TODATETIME</value>
        <signature><![CDATA[CAST(${column} as TIMESTAMP)]]></signature>
        <parameters>
            <parameter column="true" name="column"/>
			
        </parameters>
        <description>This function is used to convert character based dateTime value to dateTime type.(format is not required).Example:CAST('2018-08-30 10:15:30' as TIMESTAMP)) result:2018-08-30 10:15:30</description>
    </function>
	<function group="type conversion" returns="time">
        <key>sql.typeConversion.totime</key>
        <value>TOTIME</value>
        <signature><![CDATA[CAST(${column} as TIME)]]></signature>
        <parameters>
            <parameter column="true" name="column"/>
        </parameters>
        <description>This function is used to convert character based time value to time type.(format is not required).Example:CAST('10:15:30' as TIME) result:10:15:30</description>
    </function>
	 <function group="type conversion" returns="text">
        <key>sql.typeConversion.typeof</key>
        <value>TYPEOF</value>
        <signature><![CDATA[typeof(${column})]]></signature>
        <parameters>
            <parameter column="true" name="column"/>
         </parameters>
        <description>Returns the name of the type of the provided expression</description>
    </function>
	
	<!-- typeConversion functions end (standard)-->
	<!-- logical functions start (standard)-->
	
	<!-- Logical (start)-->
	<function group="logical" returns="text">
        <key>sql.logical.and</key>
        <value>AND</value>
        <signature><![CDATA[AND (${column} ${condition} ${value}) ${moreconditions} ]]></signature>
        <parameters>
            <parameter column="true" name="column"/>
				<parameter name="condition"  defaultValue=""/>
				<parameter name="value"  defaultValue=""/>
			<parameter column="true" name="moreconditions" defaultValue=""/>
			</parameters>
        <description>Inside IF we will use AND condition. Performs a logical conjunction on two expressions.
            In 'column' paramter we will 'drag column'.
			In 'condition' parameter provide conditions like (>,= etc.,like).
			In 'value' parameter provide condition value.
			In 'moreconditions' parameter we will use nested 'OR' condition , 'AND' conditions. 
			Example: CASE WHEN 'Washington' like '%sh%' 
             AND 'Washington' like 'W%' THEN 'return washington' 
             else 'NotMatched' end  </description>
    </function>
   <function group="logical" returns="text">
            <key>sql.logical.case</key>
            <value>CASE</value>
            <signature><![CDATA[(CASE ${condition} END)]]></signature>
            <parameters>
				<parameter column="true" name="condition"/>
            </parameters>
            <description>Inside case we will use when condition. Evaluates each condition from left to right and returns the result when the first condition met. If no condition met return from else if exist, otherwise return null. Example : CASE WHEN Quantity > 30 THEN "The quantity is greater than 30"  ELSE "The quantity is under 30" END </description>
    </function>
    <function group="logical" returns="text">
            <key>sql.logical.else</key>
            <value>ELSE</value>
            <signature><![CDATA[ELSE ${statement_list}]]></signature>
            <parameters>
				<parameter column="true" name="statement_list"/>
            </parameters>
            <description>Returns from statement_list when condition gets fail.We will use ELSE inside case function. Example: CASE when 50 > 0 then 'true' else 'false'</description>
    </function>
    <function group="logical" returns="text">
            <key>sql.logical.elseif</key>
            <value>ELSEIF</value>
            <signature><![CDATA[(case when ${column} ${condition} ${value} then ${conditiontrue} when ${elseIfcolumn} ${elseIfcondition} ${elseIfvalue} then ${elseIfconditiontrue} else ${conditionfalse} ${moreconditions} end)]]></signature>
            <parameters>
                <parameter column="true" name="column"/>
				<parameter name="condition" defaultValue=""/>
				<parameter name="value" defaultValue=""/>
				<parameter column="true" name="conditiontrue"/>
				<parameter column="true" name="elseIfcolumn"/>
				<parameter name="elseIfcondition" defaultValue=""/>
				<parameter name="elseIfvalue" defaultValue=""/>
				<parameter column="true" name="elseIfconditiontrue"/>
				<parameter column="true" name="conditionfalse" defaultValue=""/>
				<parameter column="true" name="moreconditions" defaultValue=""/>
            </parameters>
            <description>Evaluates conditions and returns 'conditiontrue' if condition is true, otherwise return 'conditionfalse'.  We will use nested condition inside else 'conditiontrue' parameter. Example:case when creditlim > 50000 then 'PLATINUM' else when (creditlim > = 50000) then 'GOLD' else 'SILVER' end </description>
    </function>
	
    <!--function group="logical" returns="text">
            <key>sql.logical.end</key>
            <value>END</value>
             <signature><![CDATA[(CASE ${expr} WHEN ${when} THEN ${then} ELSE ${else} END)]]></signature>
            <parameters>
                <parameter column="true" name="expr"/>
				<parameter column="true" name="when"/>
				<parameter column="true" name="then"/>
				<parameter column="true" name="else"/>
            </parameters>
            <description>Tests a series of expressions returning the "then" value for the first true "exp".</description>
    </function-->
	<function group="logical" returns="text">
            <key>sql.logical.if</key>
            <value>IF</value>
             <signature><![CDATA[(case when ${column} ${condition} ${value} ${moreconditions} then ${conditiontrue} else ${conditionfalse} end)]]></signature>
            <parameters>
                <parameter column="true" name="column"/>
				<parameter name="condition" defaultValue=""/>
				<parameter name="value" defaultValue=""/>
				 <parameter column="true" name="moreconditions" defaultValue=""/>
				<parameter column="true" name="conditiontrue" defaultValue=""/>
				<parameter column="true" name="conditionfalse"/>
            </parameters>
            <description>Inside IF we will use AND, OR conditions. Evaluates and returns 'conditiontrue' if condition is true, otherwise return 'conditionfalse'. 
			In 'column' paramter we will drag column.
			In 'condition' parameter provide conditions like (>,= etc.,).
			In 'value' parameter provide value.
			In 'moreconditions' parameter we will use nested 'OR', 'AND' conditions. Instead of dragging column directly we will write expression in column parameter like 50 > 0 (Note : In such case don't provide anything in 'condition' parameter and 'value' parameter). Example : (case when (creditlim > 50000) then 'PLATINUM' else 'SILVER' end)</description>
    </function>
    <function group="logical" returns="text">
            <key>sql.logical.ifnull</key>
            <value>IFNULL</value>
            <signature><![CDATA[(coalesce(${expr1}, ${expr2}))]]></signature>
            <parameters>
                <parameter column="true" name="expr1" defaultValue="'123'"/>
				<parameter column="true" name="expr2" defaultValue="'0'"/>
            </parameters>
            <description>Returns Expr1 if it is not null otherwise return expr2.NOTE: Both the expr type must be same. Example1 : (coalesce(123, 0)).Example2:
			(coalesce('123', '0'))
			</description>
    </function>
    <function group="logical" returns="text">
            <key>sql.logical.iif</key>
            <value>IIF</value>
             <signature><![CDATA[(case when ${column} ${condition} ${value} then ${conditiontrue} else ${conditionfalse} end)]]></signature>
            <parameters>
                <parameter column="true" name="column"/>
				<parameter name="condition" defaultValue=""/>
				<parameter name="value" defaultValue=""/>
				<parameter column="true" name="conditiontrue"/>
				<parameter column="true" name="conditionfalse"/>
            </parameters>
            <description>Evaluates and returns 'conditiontrue' if condition is true, otherwise return 'conditionfalse'. Example : case when 'washington'like 'W%' then 'true' else 'false' end</description>
    </function>
    <!--<function group="Logical" returns="numeric">
            <key>sql.logical.isdate</key>
            <value>ISDATE</value>
            <signature><![CDATA[var_pop(${value})]]></signature>
            <parameters>
                <parameter column="true" name="value"/>
            </parameters>
            <description></description>
    </function> -->
    <function group="logical" returns="boolean">
            <key>sql.logical.isnull</key>
            <value>ISNULL</value>
            <signature><![CDATA[IS NULL]]></signature>
            <parameters>
             </parameters>
            <description>Inside WHEN condition we will use ISNULL. Evalutes and returns 'Conditiontrue' if the expression contain Null. Example1 : CASE WHEN 1 ISNULL THEN Conditionfalse. Example2 : CASE WHEN NULL ISNULL THEN Conditiontrue </description>
		</function>	
    <function group="logical" returns="boolean">
            <key>sql.logical.not</key>
            <value>NOT</value>
            <signature><![CDATA[NOT(${column} ${condition} ${value})]]></signature>
            <parameters>
                <parameter column="true" name="column"/>
				<parameter column="true" name="condition" defaultValue=""/>
				<parameter column="true" name="value" defaultValue=""/>
            </parameters>
            <description>Evaluates and returns 'conditiontrue' if condition is false, otherwise returns 'conditionfalse'. We can use NOT inside IF. Example :  NOT(500 > 1000) result :true</description>
    </function>
    <function group="logical" returns="numeric">
            <key>sql.logical.or</key>
            <value>OR</value>
            <signature><![CDATA[ OR ${column} ${condition} ${value} ${moreconditions}]]></signature>
            <parameters>
                <parameter column="true" name="column"/>
				<parameter column="true" name="condition" defaultValue=""/>
				<parameter column="true" name="value" defaultValue=""/>
				<parameter column="true" name="moreconditions" defaultValue=""/>
            </parameters>
            <description>Performs a logical disjunction on two expressions. 
			In 'column' paramter we will drag column.
			In 'condition' parameter provide conditions like (>,= etc.,).
			In 'value' parameter provide value.
			In 'moreconditions' parameter we will use nested 'OR' , 'AND' functions. Instead of dragging column directly we will write expression in column parameter like 50 > 0 in such case don't provide anything in 'condition' and 'value' parameter. We will use OR inside IF. Example : CASE WHEN 'Washington' like '%sh%' 
             OR  'Washington' like 'W%' THEN 'return washington' 
             else 'NotMatched' end</description>
    </function>
    <!--function group="logical" returns="numeric">
            <key>sql.logical.then</key>
            <value>THEN</value>
            <signature><![CDATA[THEN ${then}]]></signature>
            <parameters>
				<parameter column="true" name="then"/>
            </parameters>
            <description>Tests a series of expressions returning the "then" value for the first true "exp". Example : CASE ['RomanNumber'] WHEN 'R' THEN 1 ELSE 3 NOTE: column's value should be in quotes if the values is manually typing</description>
    </function-->
    <function group="logical" returns="numeric">
            <key>sql.logical.when</key>
			 <value>WHEN</value>
             <signature><![CDATA[WHEN ${column} ${searchcondition} ${value} THEN ${statement_list}  ${moreconditions}]]></signature>
            <parameters>
                <parameter column="true" name="column"/>
				<parameter column="true" name="searchcondition" defaultValue=""/>
				<parameter column="true" name="value" defaultValue=""/>
				<parameter column="true" name="statement_list"/>
				<parameter column="true" name="moreconditions" defaultValue=""/>
            </parameters>
            <description>Returns 'statement_list' when condition get satisfied .
			In column paramter we will drag column.
			In searchcondition parameter provide conditions like (>, =, IS Null etc .,).
			In value parameter provide value(Note : IS Null used in 'condition' parameter then don't provide anything in 'value' parameter). 
			In moreconditions parameter we will use nested when conditions, Else condition . We will use WHEN inside CASE. Example1 : CASE WHEN 1 > 0  THEN 'one' else 'TWO'. Example2 : CASE WHEN 'Singapore' IS NULL THEN 'Singa' ELSE 'pore'. Example3 : CASE WHEN Washington like '%sh%' THEN 'return washington' else 'NotMatched' </description>
    </function>
	<!--function group="logical" returns="numeric">
            <key>sql.logical.then</key>
			 <value>THEN</value>
             <signature><![CDATA[THEN ${value} ${moreconditions}]]></signature>
            <parameters>
				<parameter column="true" name="value" defaultValue=""/>
		
				<parameter column="true" name="moreconditions" defaultValue=""/>
            </parameters>
            <description>Returns 'value' when the condition get satisfied. we use 'then' inside when condition
			 Example1 : CASE WHEN 'Singapore' IS NULL THEN 'Singa' ELSE 'pore'. Example3 : CASE WHEN Washington like '%sh%' THEN 'return washington' else 'NotMatched' </description>
    </function-->
	<function group="logical" returns="text">
            <key>sql.logical.zn</key>
            <value>ZN</value>
            <signature><![CDATA[(CASE WHEN ${expr} IS NULL THEN '0' ELSE ${expr} end)]]></signature>
            <parameters>
                <parameter column="true" name="expr"/>
            </parameters>
            <description>Returns "expression" if it is not null, otherwise returns zero.Example :(CASE WHEN '1234' IS NULL THEN '0' ELSE '1234' end) result :0 </description>
    </function>
	<!-- logical functions start (standard)-->
	

		<!-- Nested data function -->
	<function group="nestedData" returns="other">
        <key>sql.nestedData.flatten</key>
        <value>FLATTEN</value>
        <signature><![CDATA[flatten(${value})]]></signature>
        <parameters>
            	<parameter column="true" name="value"/>
        </parameters>
        <description>Having used the FLATTEN function to break down arrays into distinct rows, you can run queries that do deeper analysis on the flattened result set.</description>
	</function>
	
	<!-- conditional Functions-->
	<function group="conditional" returns="other">
        <key>sql.conditional.coalesce</key>
        <value>COALESCE</value>
        <signature><![CDATA[COALESCE(${expr1},${expr2})]]></signature>
        <parameters>
           <parameter column="true" name="expr1"/>
			<parameter column="true" name="expr2"/>
        </parameters>
        <description>This function returns the first non-NULL expression among its arguments.If all expressions evaluate to null, then the COALESCE function returns null. NOTE:expressions should be in single quotes if you are typing value.</description>
    </function>
	
	<function group="conditional" returns="other">
        <key>sql.conditional.nullif</key>
        <value>NULLIF</value>
        <signature><![CDATA[NULLIF(${expr1},${expr2})]]></signature>
        <parameters>
           <parameter column="true" name="expr1"/>
		   <parameter column="true" name="expr2"/>
        </parameters>
        <description>This function compares two expressions.If expr1 and expr2 are equal, then returns NULL. Otherwise, it returns expr1. NOTE: All Expressions should be in single quotes if you are typing value.</description>
    </function>
	 <function group="json">
        <key>sql.json.index</key>
        <value>INDEX</value>
        <signature><![CDATA[(${column}[${index}])]]></signature>
        <parameters>
            <parameter column="true" name="column"/>
            <parameter column="false" name="index" defaultValue="0"/>
        </parameters>
        <description>This function can be applied on array type to fetch the array[index] value </description>
    </function>

    <function group="json">
        <key>sql.json.property</key>
        <value>KEY_VALUE</value>
        <signature><![CDATA[(${column}.${property})]]></signature>
        <parameters>
            <parameter column="true" name="column"/>
            <parameter column="false" name="property" />
        </parameters>
        <description>This function can be applied on json type to fetch the  value for a key </description>
    </function>
	
	



	
	<!--Conversion specific functions must be there for every xml file starts-->  
	
 <function group="conversion" returns="text">
      <key>sql.text.dateToString</key>
      <value>dateToString</value>
      <signature><![CDATA[to_char(${column}, 'YYYY-MM-DD')]]></signature>
      <parameters>
         <parameter column="true" name="column" />
      </parameters>
      <description>Converts the date to string</description>
   </function>
   
    <function group="conversion" returns="text">
      <key>sql.text.numericToString</key>
      <value>numericToString</value>
      <signature><![CDATA[CAST(${column} AS VARCHAR)]]></signature>
      <parameters>
         <parameter column="true" name="column" />
      </parameters>
      <description>Converts the number to string</description>
   </function>
   
    <function group="conversion" returns="text">
      <key>sql.text.dateTimeToString</key>
      <value>dateTimeToString</value>
      <signature><![CDATA[to_char(${column}, 'YYYY-MM-DD HH24:MM:SS')]]></signature>
      <parameters>
         <parameter column="true" name="column" />
      </parameters>
      <description>Converts the datetime to string</description>
   </function>
   
   <function group="conversion" returns="text">
      <key>sql.text.timeToString</key>
      <value>timeToString</value>
      <signature><![CDATA[to_char(${column}, 'HH24:MM:SS')]]></signature>
      <parameters>
         <parameter column="true" name="column" />
      </parameters>
      <description>Converts the time to string</description>
   </function>
    <function group="conversion" returns="text">
     <key>sql.text.otherToString</key>
      <value>otherToString</value>
      <signature><![CDATA[CAST(${column} as VARCHAR)]]></signature>
      <parameters>
         <parameter column="true" name="column" />
      </parameters>
      <description>Converts the number,date,dateTime,time to string. Example:CAST(120) RESULTS:'120'.NOTE: column's value should be in quotes if the values is manually typing and its data type is "text/date/dateTime/time" type</description>
   </function>
	
</functions>