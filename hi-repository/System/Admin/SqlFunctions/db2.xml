<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<functions dialect="org.hibernate.dialect.DB2Dialect" type="db.db2">
    <!-- <function group="datetime">
        <key>db.db2.datetime.datePart</key>
        <value>date_part</value>
        <signature><![CDATA[date_part(${text}, ${interval})]]></signature>
        <parameters>
            <parameter name="text- The name of the parameter that goes inside ${}" type="text- text, numeric, boolean, date, time, dateTime" column="false- true quotes need to be applied to the value"/>
            <parameter name="interval- The name of the parameter that goes inside ${}" type="dateTime- text, numeric, boolean, date, time, dateTime" column="true- true if quotes need to be applied to the value" defaultValue="1444304200494- The default value that will be used in case if the parameter is empty"/>
        </parameters>
    </function>-->
	<!-- Return type for each function node can be the following 

	"numeric", "text", "date", "time","dateTime","boolean","other" 
	
	-->
<!-- numeric functions -->
	
	<!-- Numeric Functions-->
	<function group="numeric" returns="numeric">
        <key>sql.numeric.abs</key>
        <value>ABS</value>
        <signature><![CDATA[abs(${number})]]></signature>
        <parameters>
            <parameter column="true" name="number"/>
        </parameters>
        <description>It returns the absolute value of a number. Example: abs(-24)Result: 24</description>
    </function>
	
	<function group="numeric" returns="numeric">
        <key>sql.numeric.acos</key>
        <value>ACOS</value>
        <signature><![CDATA[acos(${number})]]></signature>
        <parameters>
            <parameter column="true" name="number"/>
        </parameters>
        <description>Returns the arc cosine of number. Example: acos(0.25) result: 1.318116071652818 </description>
    </function>
	
	<function group="numeric" returns="numeric">
        <key>sql.numeric.asin</key>
        <value>ASIN</value>
        <signature><![CDATA[asin(${number})]]></signature>
        <parameters>
            <parameter column="true" name="number"/>
        </parameters>
        <description>Returns the arc sine of number. Example: asin(0.25) result: 0.25268025514207865 </description>
    </function>
	
	<function group="numeric" returns="numeric">
        <key>sql.numeric.atan</key>
        <value>ATAN</value>
        <signature><![CDATA[atan(${number})]]></signature>
        <parameters>
            <parameter column="true" name="number"/>
        </parameters>
        <description>Returns the arc tangent of number. Example: atan(0.25) result: 0.24497866312686414 </description>
    </function>
	
	<function group="numeric" returns="numeric">
        <key>sql.numeric.atan2</key>
        <value>ATAN2</value>
        <signature><![CDATA[atan2(${number1},${number2})]]></signature>
        <parameters>
            <parameter column="true" name="number1"/>
			<parameter column="true" name="number2"/>
        </parameters>
        <description>Returns the arc tangent of given number. Example: atan2(0.50,1) result: 0.4636476090008061</description>
    </function>
	
	<function group="numeric" returns="numeric">
        <key>sql.numeric.ceiling</key>
        <value>CEILING</value>
        <signature><![CDATA[ceiling(${number})]]></signature>
        <parameters>
            <parameter column="true" name="number" defaultValue="0"/>
        </parameters>
        <description>Returns number rounded up to the nearest integer. Example: ceiling(0.25) result: 1 </description>
    </function>

	<function group="numeric" returns="numeric">
        <key>sql.numeric.cos</key>
        <value>COS</value>
        <signature><![CDATA[cos(${number})]]></signature>
        <parameters>
            <parameter column="true" name="number"/>
        </parameters>
        <description>Returns the cosine of number. Example: cos(0.25) result: 0.9689124217106447 </description>
    </function>
	
	<function group="numeric" returns="numeric">
        <key>sql.numeric.cot</key>
        <value>COT</value>
        <signature><![CDATA[cot(${number})]]></signature>
        <parameters>
            <parameter column="true" name="number"/>
        </parameters>
        <description>Returns the cotangent of an angle. Specify the angle in radians. Example: cot(0.25) result: 3.9163173646459399 </description>
    </function>
	
		<function group="numeric" returns="numeric">
        <key>sql.numeric.degrees</key>
        <value>DEGREES</value>
        <signature><![CDATA[degrees(${number})]]></signature>
        <parameters>
            <parameter column="true" name="number"/>
        </parameters>
        <description>Converts angle number in radians to degrees. Example: degrees(0.25) result: 14.32394487827058</description>
    </function>
	
	<function group="numeric" returns="numeric">
        <key>sql.numeric.div</key>
        <value>DIV</value>
        <signature><![CDATA[(${dividend} / NULLIF(${divisor}, 0))]]></signature>
        <parameters>
            <parameter column="true" name="divisor"/>
            <parameter column="true" name="dividend"/>
        </parameters>
        <description>Returns the integer part of a division operation. Example: (10/5) result: 2</description>
    </function>
	
	<function group="numeric" returns="numeric">
        <key>sql.numeric.exp</key>
        <value>EXP</value>
        <signature><![CDATA[exp(${number})]]></signature>
        <parameters>
            <parameter column="true" name="number"/>
        </parameters>
        <description>Returns Eulerâ€™s number raised to the power of the given number. Example: exp(2) result: 7.389</description>
    </function>
	
	<function group="numeric" returns="numeric">
        <key>sql.numeric.floor</key>
        <value>FLOOR</value>
        <signature><![CDATA[floor(${number})]]></signature>
        <parameters>
            <parameter column="true" name="number" defaultValue="0"/>
        </parameters>
        <description>Returns number rounded down to the nearest number. Example: floor(3.1415) result: 3 </description>
    </function>
	
		<function group="numeric" returns="numeric">
        <key>sql.numeric.ln</key>
        <value>LN</value>
        <signature><![CDATA[ln(${number})]]></signature>
        <parameters>
            <parameter column="true" name="number"/>
        </parameters>
        <description>Returns the natural logarithm of number. Example: ln(2) result: 0.6931471805599453 </description>
    </function>
	
	<function group="numeric" returns="numeric">
        <key>sql.numeric.log</key>
        <value>LOG</value>
        <signature><![CDATA[log10(${number})]]></signature>
        <parameters>
            <parameter column="true" name="number"/>
        </parameters>
        <description>Returns the base 10 logarithm of number. Example: log10(2) result: 0.3010299956639812 </description>
    </function>
	
	<function group="numeric" returns="numeric">
        <key>sql.numeric.max</key>
        <value>MAX</value>
        <signature><![CDATA[greatest(${number1},${number2})]]></signature>
        <parameters>
            <parameter column="true" name="number1"/>
            <parameter column="true" name="number2"/>
        </parameters>
        <description>Returns the largest of the provided values. Example: greatest(4,13) result: 13</description>
    </function>
	<function group="numeric" returns="numeric">
        <key>sql.numeric.min</key>
        <value>MIN</value>
        <signature><![CDATA[least(${number1},${number2})]]></signature>
        <parameters>
            <parameter column="true" name="number1"/>
            <parameter column="true" name="number2"/>
        </parameters>
        <description>Returns the smallest of the provided values. Example: least(13,4) result: 4</description>
    </function>
	
	  <function group="numeric" returns="numeric">
        <key>sql.numeric.power</key>
        <value>POWER</value>
        <signature><![CDATA[pow(${number},${exponent})]]></signature>
        <parameters>
            <parameter column="true" defaultValue="0" name="number"/>
            <parameter defaultValue="10" name="exponent"/>
        </parameters>
        <description>Displays the value of a number raised to the power of another number. Example: pow(4,2) result: 16</description>
    </function>
	
	<function group="numeric" returns="numeric">
        <key>sql.numeric.radians</key>
        <value>RADIANS</value>
        <signature><![CDATA[radians(${number})]]></signature>
        <parameters>
            <parameter column="true" name="number"/>
        </parameters>
        <description>Converts the value of a number from degrees to radians. Example : radians(4) result : 0.06981317007977318</description>
    </function>
	
	<function group="numeric" returns="numeric">
        <key>sql.numeric.round</key>
        <value>ROUND</value>
        <signature><![CDATA[round(${number}, ${decimalpoint})]]></signature>
        <parameters>
            <parameter column="true" name="number"/>
            <parameter defaultValue="1" name="decimalpoint"/>
        </parameters>
        <description>Displays a value rounded to a certain number of decimal places. Example: round(34.4158,2) result: 34.42</description>
    </function>
	
	<function group="numeric" returns="numeric">
        <key>sql.numeric.sign</key>
        <value>SIGN</value>
        <signature><![CDATA[sign(${number})]]></signature>
        <parameters>
            <parameter column="true" name="number"/>
        </parameters>
        <description>Returns the signum function of number, that is:
		0 if the argument is 0,
		1 if the argument is greater than 0,
		-1 if the argument is less than 0. Example: sign(0.5) result: 1.</description>
    </function>
	<function group="numeric" returns="numeric">
        <key>sql.numeric.sin</key>
        <value>SIN</value>
        <signature><![CDATA[sin(${number})]]></signature>
        <parameters>
            <parameter column="true" name="number"/>
        </parameters>
        <description>Returns the sine of number. Example: sin(0.25) result: 0.24740395925452294</description>
    </function>
	
	 <function group="numeric" returns="numeric">
        <key>sql.numeric.sqrt</key>
        <value>SQRT</value>
        <signature><![CDATA[sqrt(${number})]]></signature>
        <parameters>
            <parameter column="true" name="number"/>
        </parameters>
        <description>Displays the square root of a non-negative number. Example: sqrt(5) result: 2.23606797749979</description>
    </function>

	<function group="numeric" returns="numeric">
        <key>sql.numeric.square</key>
        <value>SQUARE</value>
        <signature><![CDATA[(${number} * ${number})]]></signature>
        <parameters>
            <parameter column="true" name="number"/>
        </parameters>
        <description>It displays the square of a given number. Example: square(4) result: 16</description>
    </function>
	
	<function group="numeric" returns="numeric">
        <key>sql.numeric.tan</key>
        <value>TAN</value>
        <signature><![CDATA[tan(${number})]]></signature>
        <parameters>
            <parameter column="true" name="number"/>
        </parameters>
        <description>Returns the tangent of number. Example: tan(0.25) result: 0.25534192122103627 </description>
    </function>
	
	<function group="numeric" returns="numeric">
        <key>sql.numeric.pi</key>
        <value>PI</value>
        <signature><![CDATA[(3.141592653589793)]]></signature>
        <parameters/>
        <description>Returns the constant Pi. Example: pi() result: 3.14159 </description>
    </function>
	
	<function group="numeric" returns="numeric">
        <key>sql.numeric.truncate</key>
        <value>TRUNCATE</value>
        <signature><![CDATA[truncate(${number},${digit})]]></signature>
        <parameters>
            <parameter column="true" defaultValue="0" name="number"/>
            <parameter defaultValue="10" name="digit"/>
        </parameters>
        <description>Displays a number truncated to a certain number of decimal places. Example: truncate(1.289,2) result: 1.28</description>
    </function>
	<!-- duplicate of TOCHAR function -->
	<!--function group="db2 specific" returns="text">
        <key>sql.numeric.char</key>
        <value>CHAR</value>
        <signature><![CDATA[CHAR(${column})]]></signature>
        <parameters>
            <parameter column="true" name="column"/>
			
        </parameters>
        <description>The CHAR function returns a fixed-length character string representation of the argument. Eg: CHAR(3.2) result:'3.2'</description>
    </function-->
	<function group="db2 specific" returns="numeric">
        <key>sql.numeric.compareDecfloat</key>
        <value>COMPARE_DECFLOAT</value>
        <signature><![CDATA[COMPARE_DECFLOAT(${column},${column2})]]></signature>
        <parameters>
            <parameter column="true" name="column"/>
			<parameter column="true" name="column2"/>
        </parameters>
        <description>The COMPARE_DECFLOAT function returns a SMALLINT value that indicates whether the two arguments are equal or unordered, or whether one argument is greater than the other. Possible o/p :'0'->The arguments are exactly equal, '1'->column1 is less than column2, '2'->column1 is greater than column2, '3'->The arguments are unordered.
		Eg: COMPARE_DECFLOAT(1.0,1.9) result:1</description>
    </function>


	
	<function group="db2 specific" returns="numeric">
        <key>sql.numeric.mod</key>
        <value>MOD</value>
        <signature><![CDATA[MOD(${column},${column2})]]></signature>
        <parameters>
            <parameter column="true" name="column"/>
			 <parameter column="true" name="column2"/>
        </parameters>
        <description>The MOD function divides the first argument by the second argument and returns the remainder.
The formula used to calculate the remainder is: "MOD(x,y) = x - FLOOR(x/y) * y" Eg: MOD(20,3) result:2</description>
    </function>

	
	<!--function group="db2 specific" returns="text">
        <key>sql.numeric.toChar</key>
        <value>TO_CHAR</value>
        <signature><![CDATA[TO_CHAR(${column})]]></signature>
        <parameters>
            <parameter column="true" name="column"/>
	
        </parameters>
        <description>The TO_CHAR function returns a character string representation of a timestamp value that has been formatted using a specified character template.Eg: TO_CHAR(123) result:'123'</description>
    </function-->
	
	<!-- text functions-->
	<function group="db2 specific" returns="numeric">
        <key>sql.text.double</key>
        <value>DOUBLE</value>
        <signature><![CDATA[DOUBLE(${column})]]></signature>
        <parameters>
            <parameter column="true" name="column"/>
			
        </parameters>
        <description>The DOUBLE functions returns a floating-point representation of either a number or a character-string or graphic-string representation of a number, an integer, a decimal number, or a floating-point number.Eg:DOUBLE('2.99') result:2.99</description>
    </function>
	
	<!--function group="db2 specific" returns="numeric">
        <key>sql.text.charLength</key>
        <value>CHAR_LENGTH</value>
        <signature><![CDATA[CHARACTER_LENGTH(${column})]]></signature>
        <parameters>
            <parameter column="true" name="column"/>
           
        </parameters>
        <description>The CHARACTER_LENGTH function returns the length of the argument. Eg:CHAR_LENGTH('HONEY BADGER') results:12 NOTE:column's value should be in single quotes if you are typing the value.</description>
    </function-->
	<function group="db2 specific" returns="numeric">
        <key>sql.text.toNumber</key>
        <value>TO_NUMBER</value>
        <signature><![CDATA[TO_NUMBER(${column})]]></signature>
        <parameters>
            <parameter column="true" name="column"/>
           
        </parameters>
        <description>This function converts a numeric string to a number type using Default format.</description>
    </function>
	<function group="text" returns="numeric">
        <key>sql.text.length</key>
        <value>LENGTH</value>
        <signature><![CDATA[length(${string})]]></signature>
        <parameters>
            <parameter column="true" name="string"/>
        </parameters>
        <description>Returns the number of characters in text. Example: length('Bengaluru') result:9</description>
    </function>
	<!--function group="db2 specific" returns="text">
        <key>sql.text.charToChar</key>
        <value>CHAR_TO_CHAR</value>
        <signature><![CDATA[CHAR(${column},${length})]]></signature>
        <parameters>
            <parameter column="true" name="column"/>
            <parameter column="false" name="length"/>
           
        </parameters>
        <description>The CHAR function returns a fixed-length character string representation of the argument.Eg:CHAR('HONEY BADGER',9) results:'HONEY BAD' NOTE:column's value should be in single quotes if you are typing the value.</description>
    </function-->
	<function group="db2 specific" returns="numeric">
        <key>sql.text.locate</key>
        <value>LOCATE</value>
        <signature><![CDATA[LOCATE(${searchString},${column},${start})]]></signature>
        <parameters>
			<parameter column="true" name="searchString"/>
            <parameter column="true" name="column"/>
            <parameter column="false" name="start" defaultValue="1"/>
           
        </parameters>
        <description>The LOCATE function returns the position at which the first occurrence of an argument starts within another argument.Eg:LOCATE('N', 'DINING',1) results:3. NOTE:column's value should be in single quotes if you are typing the value.</description>
    </function>

	
	 <function group="text" returns="numeric">
        <key>sql.text.ascii</key>
        <value>ASCII</value>
        <signature><![CDATA[ascii(${string})]]></signature>
        <parameters>
            <parameter column="true" name="string" defaultValue="'A'"/>
        </parameters>
        <description>Returns the Unicode of the first character of string. Example : ASCII('A') result: 65</description>
    </function>
	
	<function group="text" returns="text">
        <key>sql.text.char</key>
        <value>CHAR</value>
        <signature><![CDATA[chr(${number})]]></signature>
        <parameters>
            <parameter column="true" name="number"/>
        </parameters>
        <description>Returns the character encoded by the ASCII code. Example: CHAR(65) result: A</description>
    </function>
	
	 <function group="text" returns="text">
        <key>sql.text.concat</key>
        <value>CONCAT</value>
        <signature><![CDATA[concat(${string1},${string2})]]></signature>
        <parameters>
            <parameter column="true" name="string1" defaultValue="'Beng'"/>
            <parameter column="true" name="string2" defaultValue="'aluru'"/>
        </parameters>
        <description>Returns the concatenation of string1, string2. Example:concat('Beng','aluru') result: Bengaluru </description>
    </function>
	
	<function group="text" returns="boolean">
        <key>sql.text.contains</key>
        <value>CONTAINS</value>
        <signature><![CDATA[(case when(locate(${substring}, ${string}))>0 then true else false end)]]></signature>
        <parameters>
            <parameter column="true" name="substring"/>
            <parameter column="true" name="string"/>
        </parameters>
        <description>Returns true if the given string contains the specified substring. Example: case when(locate('g', 'Bengaluru'))>0 then true else false end result: true </description>
    </function>
	
	<function group="text" returns="boolean">
        <key>sql.text.endswith</key>
        <value>ENDSWITH</value>
        <signature><![CDATA[case when(${string} like ('%'||${substring})) then true else false end]]></signature>
        <parameters>
            <parameter column="true" name="string"/>
            <parameter column="true" name="substring"/>
        </parameters>
        <description>Returns true if the given string endswith specified substring. Example:case when('postgres' like ('%'||'res')) then true else false end result: true. Note:Please provide single quotes if you are directly typing the substring value.</description>
    </function>
	
	<function group="text" returns="numeric">
        <key>sql.text.find</key>
        <value>FIND</value>
        <signature><![CDATA[locate(${substring},${string})]]></signature>
        <parameters>
            <parameter column="true" name="substring"/>
			<parameter column="true" name="string"/>
        </parameters>
        <description>Returns the starting position of the first instance of substring in string. Positions start with 1. If not found, 0 is returned. Example :locate('z','Bengaluru') result : 0, locate('aluru','Bengaluru') result : 5</description>
    </function>
	
	<function group="text" returns="text">
        <key>sql.text.left</key>
        <value>LEFT</value>
        <signature><![CDATA[left(${string},${length})]]></signature>
        <parameters>
            <parameter column="true" name="string"/>
			<parameter column="true" name="length" defaultValue="0"/>	
        </parameters>
        <description>Returns the left most (length) character from the string . Example: left('Bengaluru',4) result: beng</description>
    </function>
	
	 <function group="text" returns="text">
        <key>sql.text.lower</key>
        <value>LOWER</value>
        <signature><![CDATA[lower(${string})]]></signature>
        <parameters>
            <parameter column="true" name="string"/>
        </parameters>
        <description>Converts all characters in the specified string to lowercase. Example: LOWER('BENGALURU') result: bengaluru </description>
    </function>
	
	<function group="db2 specific" returns="numeric">
        <key>sql.text.difference</key>
        <value>DIFFERENCE</value>
        <signature><![CDATA[DIFFERENCE(${column},${column2})]]></signature>
        <parameters>
            <parameter column="true" name="column"/>
            <parameter column="true" name="column2"/>
           
        </parameters>
        <description>The DIFFERENCE function returns a value, from 0 to 4, that represents the difference between the sounds of two strings, based on applying the SOUNDEX function to the strings. A value of 4 is the best possible sound match.Eg:-DIFFERENCE('sheep', 'ship') results in 4. NOTE:column's value should be in single quotes if you are typing the value.</description>
    </function>

	<function group="text" returns="numeric">
        <key>sql.text.findnth</key>
        <value>FINDNTH</value>
        <signature><![CDATA[instr(${string}, ${substring},1,${th_appeareance})]]></signature>
        <parameters>
            <parameter column="true" name="string"/>
			<parameter column="true" name="substring"/>
			<parameter column="true" name="th_appeareance" type="numeric"/>
        </parameters>
        <description>Returns the position of nth occurrence of given substring in a string. Example:instr('calculation','a',1, 2).Result:7</description>
    </function>
	
	<function group="text" returns="text">
        <key>sql.text.lpad</key>
        <value>LPAD</value>
        <signature><![CDATA[lpad(${string},${length},${padString})]]></signature>
        <parameters>
            <parameter column="true" name="string"/>
            <parameter name="length"/>
            <parameter column="true" name="padString"/>
        </parameters>
        <description>Displays a string that is left padded with a specified string to a certain length. If length is less than string, return value is truncated to length characters. Example: LPAD('Wellesley', 14,'Hills') result:HillsWellesley. </description>
    </function>
	<function group="text" returns="text">
        <key>sql.text.ltrim</key>
        <value>LTRIM</value>
        <signature><![CDATA[ltrim(${string})]]></signature>
        <parameters>
            <parameter column="true" name="string"/>
        </parameters>
        <description> Removes leading whitespace from string Example: LTRIM(' Bengaluru') result: Bengaluru
        </description>
    </function>
		
	<function group="text" returns="text">
        <key>sql.text.mid</key>
        <value>MID</value>
        <signature><![CDATA[trim(substr(${string},${position},${length}))]]></signature>
        <parameters>
            <parameter column="true" name="string"/>
			<parameter column="true" name="position"/>
			<parameter column="true" name="length"/>
        </parameters>
        <description>Returns the text starting from specified position. If position is more than string or length is less than 1 it will return empty string. Example: substr('bengaluru',2,5) result: engal</description>
    </function>
	
	<function group="db2 specific" returns="numeric">
        <key>sql.text.float</key>
        <value>FLOAT</value>
        <signature><![CDATA[FLOAT(${column})]]></signature>
        <parameters>
            <parameter column="true" name="column"/>
           
        </parameters>
        <description>The FLOAT function returns a floating-point representation of either a number or a string representation of a number.Eg:-FLOAT('10.9') results in 10.9. </description>
    </function>
	
	<function group="text" returns="text">
        <key>sql.text.replace</key>
        <value>REPLACE</value>
        <signature><![CDATA[regexp_replace(${string},${substring},${replacestring})]]></signature>
        <parameters>
            <parameter column="true" name="string"/>
			<parameter column="true" name="substring"/>
			<parameter column="true" name="replacestring"/>
        </parameters>
        <description>String search for substring and replace it with replacestring. If substring is not found, the string is not changed. Example: REPLACE('bengaluru','b','Z') result: Zengaluru</description>
    </function>


	<function group="text" returns="text">
        <key>sql.text.right</key>
        <value>RIGHT</value>
        <signature><![CDATA[RIGHT(${string},${length})]]></signature>
        <parameters>
            <parameter column="true" name="string"/>
           <parameter column="true" name="length"/>
        </parameters>
        <description>Returns the rightmost character from the string. Example : right('bengaluru',4) result :urul</description>
    </function>
	<function group="text" returns="text">
        <key>sql.text.rpad</key>
        <value>RPAD</value>
        <signature><![CDATA[RPAD(${string},${length},${padString})]]></signature>
        <parameters>
            <parameter column="true" name="string"/>
           <parameter column="true" name="length"/>
		    <parameter column="true" name="padString"/>
        </parameters>
        <description>Displays a string that is right-padded with a specified string to a certain length. If length is less than the length of string, the result is truncated to length characters. Length must not be negative and padString must not be non-empty. Example: Rpad('Wellesley', 15, 'Hills') result: Wellesley Hills</description>
    </function>
	
	 <function group="text" returns="text"> 
        <key>sql.text.rtrim</key>
        <value>RTRIM</value>
        <signature><![CDATA[rtrim(${string})]]></signature>
        <parameters>
            <parameter column="true" name="string"/>
        </parameters>
        <description>Removes trailing whitespace from string. Example: RTRIM('Bengaluru  ') Result: Bengaluru </description>
    </function>
	
	<function group="text" returns="text">
        <key>sql.text.space</key>
        <value>SPACE</value>
        <signature><![CDATA[space(${noOfSpace})]]></signature>
        <parameters>
            <parameter column="true" name="noOfSpace"/>
        </parameters>
        <description>Returns a string consisting of space characters. Example: space(6) result:   .
        </description>
    </function>
	
	<function group="text" returns="boolean">
        <key>sql.text.startswith</key>
        <value>STARTSWITH</value>
        <signature><![CDATA[case when(${string} like (${substring}||'%')) then true else false end]]></signature>
        <parameters>
            <parameter column="true" name="string"/>
            <parameter column="true" name="substring"/>
        </parameters>
        <description>Returns true if string starts with substring. Example: case when('bengaluru' like ('ben'||'%')) then true else false end result: true.  Note:Please provide single quotes if you are directly typing the substring value.</description>
    </function>
	
	<function group="db2 specific" returns="text">
        <key>sql.text.substr</key>
        <value>SUBSTR</value>
        <signature><![CDATA[SUBSTR(${column},${start},${end})]]></signature>
        <parameters>
            <parameter column="true" name="column"/>
           <parameter column="false" name="start"/>
		    <parameter column="false" name="end"/>
        </parameters>
        <description> The SUBSTR function returns a substring of a string.Eg:- SUBSTR('HONEY BADGER',2,3) results in 'ONE'.NOTE: values should be in single quotes if you are typing the value.</description>
    </function>
	
	 <function group="text" returns="text">
        <key>sql.text.trim</key>
        <value>TRIM</value>
        <signature><![CDATA[trim(${string})]]></signature>
        <parameters>
            <parameter column="true" name="string"/>
        </parameters>
        <description>Removes whitespace from string. Example:TRIM('     Bengaluru ') result: Bengaluru
        </description>
    </function>	
	
	<function group="text" returns="text">
        <key>sql.text.upper</key>
        <value>UPPER</value>
        <signature><![CDATA[upper(${string})]]></signature>
        <parameters>
            <parameter column="true" name="string"/>
        </parameters>
        <description>Converts all characters in a string to uppercase. Example: UPPER('bengaluru') result: BENGALURU</description>
    </function>
	
	
	<!-- DateTime Functions-->
	
	 <function group="dateTime" returns="dateTime">
        <key>sql.dateTime.datetimeadd</key>
        <value>DATETIMEADD</value>
        <signature><![CDATA[(${datetime} + ${value} ${unit})]]></signature>
        <parameters>
		       <parameter column="true" name="datetime" defaultValue="timestamp '2014-03-08 09:07:20'"/>
               <parameter column="true" name="value" defaultValue="2" />
			   <parameter column="true" name="unit" defaultValue="year"/>
        </parameters>
        <description>Returns the specified date with the specified number of interval added to the specified date_part of that date.Example:(timestamp '2014-03-08 09:07:20' + 2 year) result:2016-03-08 09:07:20 supported units:hour,minute,second,day , month , year.</description>
    </function>
     <function group="dateTime" returns="numeric">
        <key>sql.dateTime.datetimediff</key>
        <value>DATETIMEDIFF</value>
        <signature><![CDATA[(EXTRACT(${unit} FROM ${datetime1})- EXTRACT(${unit} FROM ${datetime2}))]]></signature>
        <parameters>
            <parameter column="true" name="unit" defaultValue="year"/>
            <parameter column="true" name="datetime1" defaultValue="timestamp '2019-03-08 10:12:12'"/>
			<parameter column="true" name="datetime2" defaultValue="timestamp '2011-03-08 11:22:33'"/>
        </parameters>
        <description>Returns the difference between datetime and datetime2 expressed in terms of unit. Example:EXTRACT(year from timestamp '2019-03-08 10:12:12')-EXTRACT(year from timestamp '2011-03-08 10:12:12') result: 8 supported units: second, minute , hour , day , month , year.</description>
    </function>
	
	<function group="dateTime" returns="numeric">
        <key>sql.dateTime.datetimepart</key>
        <value>DATETIMEPART</value>
        <signature><![CDATA[DATE_PART(${unit}, ${datetime})]]></signature>
        <parameters>
            <parameter column="true" name="unit" defaultValue="'year'"/>
			<parameter column="true" name="datetime" defaultValue=" timestamp '2014-03-08 12:02:34'"/>
        </parameters>
        <description>Returns an integer that represents the specified datepart of the specified date. Example: DATE_PART('year', timestamp('2014-03-08 12:11:20')) result: 2014. supported date_part:YEAR, QUARTER, MONTH , DAY.</description>
    </function>
    <function group="dateTime" returns="dateTime">
        <key>sql.dateTime.datetimetrunc</key>
        <value>DATETIMETRUNC</value>
         <signature><![CDATA[DATE_TRUNC(${unit}, ${datetime})]]></signature>
        <parameters>
            <parameter column="true" name="unit" defaultValue="'year'"/>
            <parameter column="true" name="datetime" defaultValue="timestamp '2014-03-08 12:25:10'"/>
        </parameters>
        <description>Truncates the specified date to the accuracy specified by the unit. Example:date_trunc('year', timestamp '2014-03-08 12:11:20') result: 2014-03-08 12:11:00.000000.</description>
    </function>
	
	
	<!--function group="db2 specific" returns="dateTime">
        <key>sql.dateTime.toDate</key>
        <value>TO_DATE</value>
        <signature><![CDATA[TO_DATE(${column},'${format}')]]></signature>
        <parameters>
            <parameter column="true" name="column"/>
			<parameter  name="format"/>
        </parameters>
        <description>The TO_DATE function returns a value that is based on the interpretation of the input string using the specified format. Eg: TO_DATE('2018-12-03',yyyy-MM-dd) returns '2018-10-03 00:00:00'.TO_DATE('2018-12-03 10:11:22.00',YYYY-MM-DD HH24:MI:SS.NN). NOTE:column's value should be in single quotes if you are typing the value.</description>
    </function-->
	<function group="dateTime" returns="numeric">
        <key>sql.dateTime.week</key>
        <value>WEEK</value>
        <signature><![CDATA[WEEK(${datetime})]]></signature>
        <parameters>
            <parameter column="true" name="datetime" defaultValue="timestamp '2014-03-08 12:20:19'"/>
        </parameters>
        <description>Returns the ISO week of the year for date/dateTime. The value ranges from 0 to 52. Example: week(timestamp '2014-03-08 22:20:19')/week(date '2014-03-08') result: 9</description>
    </function>
	<function group="dateTime" returns="numeric">
        <key>sql.dateTime.year</key>
        <value>YEAR</value>
        <signature><![CDATA[YEAR(${datetime})]]></signature>
        <parameters>
            <parameter column="true" name="datetime" defaultValue="timestamp '2007-02-03 09:00:00'"/>
        </parameters>
        <description>Returns the year for date/datetime. Example: year(timestamp '2007-02-03 09:00:00') result: 2007</description>
    </function>
	<function group="db2 specific" returns="time">
        <key>sql.dateTime.time</key>
        <value>TIME</value>
        <signature><![CDATA[TIME(${column})]]></signature>
        <parameters>
            <parameter column="true" name="column"/>
		
        </parameters>
        <description>The TIME function returns a time that is derived from a value.Eg: TIME('2018-12-05 12:30:20.12345') returns '12:30:20'. NOTE:column's value should be in single quotes if you are typing the value.</description>
    </function>
	<!--  integer( floor( (current date - birth_date ) / 10000 ))  -->
	<function group="db2 specific" returns="numeric">
        <key>sql.date.age</key>
        <value>AGE</value>
        <signature><![CDATA[integer(floor((${date1} - ${date2} ) / 10000 ))]]></signature>
        <parameters>
            <parameter column="true" name="date1"/>
            <parameter column="true" name="date2"/>
	    </parameters>
        <description>This function displays the age differnce between 2 dates.</description>
    </function>
	
	<function group="dateTime" returns="numeric">
        <key>sql.dateTime.hour</key>
        <value>HOUR</value>
        <signature><![CDATA[extract(HOUR FROM ${datetime})]]></signature>
        <parameters>
            <parameter column="true" name="datetime" defaultValue="timestamp '2014-03-08 09:00:00'"/>
        </parameters>
        <description>Returns HOUR from datetime.Example: extract(HOUR from TIMESTAMP '2014-03-08 09:00:00') result: 9</description>
    </function>
	
	<function group="dateTime" returns="dateTime">
        <key>sql.dateTime.makedatetime</key>
        <value>MAKEDATETIME</value>
        <signature><![CDATA[timestamp(${year}||'-'||${month}||'-'||${day}||' '||${hour}||':'||${minute}||':'||${second})]]></signature>
        <parameters>
            <parameter column="true" name="year" defaultValue="'2013'"/>
			<parameter column="true" name="month" defaultValue="'7'"/>
			<parameter column="true" name="day" defaultValue="'15'"/>
			<parameter column="true" name="hour" defaultValue="'8'"/>
			<parameter column="true" name="minute" defaultValue="'15'"/>
			<parameter column="true" name="second" defaultValue="'23.5'"/>
        </parameters>
        <description>Returns a datetime that combines a year,month,day,hour,minute,second. Example: MAKEDATETIME(date '1899-12-30', '07:59:00') result: 2019-11-22 10:25:22.300000.</description>
    </function>
	
	<function group="dateTime" returns="time">
        <key>sql.dateTime.maketime</key>
        <value>MAKETIME</value>
        <signature><![CDATA[time(${hour}||':'||${minute}||':'||${second})]]></signature>
        <parameters>
           <parameter column="true" name="hour" defaultValue="'12'"/>
			<parameter column="true" name="minute" defaultValue="'30'"/>
			<parameter column="true" name="second" defaultValue="'40'"/>
        </parameters>
        <description>Returns time value from the hour, minute and seconds.Example:MAKETIME('14','52','40') Result:11:25:30
	 </description>
    </function>
	
	<function group="dateTime" returns="numeric">
        <key>sql.dateTime.millisecond</key>
        <value>MILLISECOND</value>
        <signature><![CDATA[microsecond(${datetime})]]></signature>
        <parameters>
            <parameter column="true" name="datetime" defaultValue="timestamp '2014-03-08 12:20:19.344'"/>
        </parameters>
        <description>Returns the millisecond of the second for time. Example: millisecond(timestamp '2014-03-08 12:20:19.344') result:344</description>
    </function>

	
	<function group="dateTime" returns="numeric">
        <key>sql.dateTime.minute</key>
        <value>MINUTE</value>
        <signature><![CDATA[MINUTE(${datetime})]]></signature>
        <parameters>
            <parameter column="true" name="datetime" defaultValue="timestamp '2014-03-08 12:20:19'"/>
	   </parameters>
        <description>Returns minute for date/datetime. Example: minute('2014-03-08 12:20:19') result: 20.</description>
    </function>
	<function group="dateTime" returns="numeric">
        <key>sql.dateTime.month</key>
        <value>MONTH</value>
        <signature><![CDATA[MONTH(${datetime})]]></signature>
        <parameters>
            <parameter column="true" name="datetime" defaultValue="timestamp '2014-03-08 12:20:19'"/>
        </parameters>
        <description>Returns the month of the year for date/datetime. Example: month(timestamp '2014-03-08 12:20:19')/month(date '2014-03-08') result:2</description>
    </function>
	<function group="dateTime" returns="text">
        <key>sql.dateTime.monthname</key>
        <value>MONTHNAME</value>
        <signature><![CDATA[monthname(${datetime})]]></signature>
        <parameters>
            <parameter column="true" name="datetime" defaultValue="timestamp '2007-02-03 09:00:00'"/>
        </parameters>
        <description>Returns the month name based on month number. The value ranges from 1 (January) to 12 (December).  Example: monthname(timestamp '2007-02-03 09:00:00')/ monthname(date '2007-02-03') result: 'February'</description>
    </function>
	
	<function group="dateTime" returns="dateTime">
        <key>sql.dateTime.now</key>
        <value>NOW</value>
        <signature><![CDATA[now()]]></signature>
        <parameters/>
        <description>Displays Current date and time. This function equivalent to current_timestamp.</description>
    </function>
	
	
	 <function group="dateTime" returns="dateTime">
        <key>sql.dateTime.parse</key>
        <value>PARSE</value>
        <signature><![CDATA[TIMESTAMP_FORMAT(${string},${format})]]></signature>
        <parameters>
            <parameter column="true" name="string" defaultValue="'2008-01-31 09:00:00'"/>
			<parameter column="true" name="format" defaultValue="'YYYY-MM-DD HH24:MI:SS'"/>
       </parameters>
        <description>Takes a string as input and displays a date in a specific format. Example: TIMESTAMP_FORMAT('2008-01-31 09:00:00','YYYY-MM-DD HH24:MI:SS') result: 2008-01-31 09:20:30.000000 </description>
    </function>
	
	<function group="db2 specific" returns="numeric">
        <key>sql.dateTime.monthsBetween</key>
        <value>MONTHS_BETWEEN</value>
        <signature><![CDATA[MONTHS_BETWEEN(${column},${column2})]]></signature>
        <parameters>
            <parameter column="true" name="column"/>
			 <parameter column="true" name="column2"/>
        </parameters>
        <description>The MONTHS_BETWEEN function returns an estimate of the number of months between two arguments. Eg: MONTHS_BETWEEN ('2008-02-17 12:22:40.0000','2008-01-17 08:22:40.0000')  returns 1.000000000000000. NOTE:column's value should be in single quotes if you are typing the value.</description>
    </function>
	
	<function group="dateTime" returns="numeric">
        <key>sql.dateTime.quarter</key>
        <value>QUARTER</value>
        <signature><![CDATA[QUARTER(${datetime})]]></signature>
        <parameters>
            <parameter column="true" name="datetime" defaultValue="timestamp '2014-03-08 12:20:19'"/>
        </parameters>
        <description>Returns the quarter of the year for date/datetime. Example: quarter(timestamp '2014-03-08 12:20:19') result:1</description>
    </function>
	
	<function group="dateTime" returns="numeric">
        <key>sql.dateTime.second</key>
        <value>SECOND</value>
        <signature><![CDATA[SECOND(${datetime})]]></signature>
        <parameters>
            <parameter column="true" name="datetime" defaultValue="timestamp '2014-03-08 09:00:00'"/>
        </parameters>
        <description>Returns SECONDS for date/datetime.Example: second(timestamp '2019-07-20 09:10:20') result: 20</description>
    </function>
<!-- Date Functions-->
	
	<function group="date" returns="date">
        <key>sql.date.dateadd</key>
        <value>DATEADD</value>
        <signature><![CDATA[(${date} + ${value} ${unit})]]></signature>
        <parameters>
            <parameter column="true" name="date" defaultValue="date '2014-03-08'"/>
			<parameter column="true" name="value" defaultValue="2"/>
			<parameter column="true" name="unit" defaultValue="year"/>
	    </parameters>
        <description>Returns the specified date with the specified number of interval added to the specified date_part of that date.Example:(date '2014-03-08' + 2 year) result:2016-03-08 supported units:day, month , year.</description>
    </function>

	<function group="date" returns="numeric">
        <key>sql.date.datediff</key>
        <value>DATEDIFF</value>
        <signature><![CDATA[(EXTRACT(${unit} FROM ${date1})- EXTRACT(${unit} FROM ${date2}))]]></signature>
        <parameters>
            <parameter column="true" name="unit" defaultValue="year"/>
            <parameter column="true" name="date1" defaultValue="date '2014-03-08'"/>
			<parameter column="true" name="date2" defaultValue="date '2019-03-08'"/>
        </parameters>
        <description>Returns the difference between date1 and date2 expressed in terms of unit. Example:(EXTRACT(year from date '2019-03-08')-EXTRACT(year from date '2014-03-08')) result: 4 supported units: day, month , year.</description>
    </function>
	
	
	<function group="date" returns="numeric">
        <key>sql.date.datepart</key>
        <value>DATEPART</value>
        <signature><![CDATA[DATE_PART(${unit}, ${date})]]></signature>
        <parameters>
            <parameter column="true" name="unit" defaultValue="'year'"/>
			<parameter column="true" name="date" defaultValue="date '2014-03-08'"/>
        </parameters>
        <description>Returns an integer that represents the specified datepart of the specified date. Example: DATE_PART('year', DATE('2007-02-18')) result: 2007. supported unit:YEAR, MONTH,DAY.</description>
    </function>

	<function group="date" returns="dateTime">
        <key>sql.date.datetrunc</key>
        <value>DATETRUNC</value>
        <signature><![CDATA[DATE_TRUNC(${unit},${date})]]></signature>
        <parameters>
            <parameter column="true" name="unit" defaultValue="'year'"/>
            <parameter column="true" name="date" defaultValue="date '2014-03-08'"/>
        </parameters>
        <description>Truncates the specified date to the accuracy specified by the unit. Example: date_trunc('year', date '2014-03-08'). result:2014-01-01 00:00:00.000.</description>
    </function>
	
	<function group="date" returns="date">
        <key>sql.date.makedate</key>
        <value>MAKEDATE</value>
        <signature><![CDATA[date(${year}||'-'||${month}||'-'||${day})]]></signature>
		<parameters>
            <parameter name="year" defaultValue="'2019'"/>
			<parameter name="month" defaultValue="'7'"/>
			<parameter name="day" defaultValue="'23'"/>
        </parameters>
        <description>Returns a date for given year, month and day. Example: MAKEDATE(2019,07,23) result : 2019-07-23</description>
    </function>
	
	<function group="date" returns="date">
        <key>sql.date.today</key>
        <value>TODAY</value>
        <signature><![CDATA[(CURRENT_DATE)]]></signature>
        <parameters/>
        <description>Displays Current date.</description>
    </function>
	
	<!--function group="db2 specific" returns="date">
        <key>sql.date.dateadd_months</key>
        <value>ADD_MONTHS</value>
        <signature><![CDATA[ADD_MONTHS(${column}, ${integer})]]></signature>
        <parameters>
            <parameter column="true" name="column"/>
			<parameter  name="integer"/>
			
        </parameters>
        <description>The ADD_MONTHS function returns a date that represents date column plus a specified number of months. Eg: ('2015-05-15', 2 ) returns 2015-07-15. NOTE:column's value should be in single quotes if you are typing the value.</description>
    </function-->
	<function group="db2 specific" returns="date">
        <key>sql.dateTime.date</key>
        <value>DATE</value>
        <signature><![CDATA[DATE(${column})]]></signature>
        <parameters>
            <parameter column="true" name="column"/>
	    </parameters>
        <description>The DATE function returns a date that is derived from a value. Eg: ('2015-05-15 11:23:00') returns '2015-05-15'. NOTE:column's value should be in single quotes if you are typing the value.</description>
    </function>
	
	<function group="dateTime" returns="numeric">
        <key>sql.dateTime.day</key>
        <value>DAY</value>
        <signature><![CDATA[DAY(${datetime})]]></signature>
        <parameters>
            <parameter column="true" name="datetime" defaultValue="timestamp '2014-03-08 09:00:00'"/>
	    </parameters>
        <description>The DAY function returns the day part of a value. Example: day(timestamp '2014-03-08 09:00:00') result : 8 NOTE:column's value should be in single quotes if you are typing the value.</description>
    </function>
	
	 <function group="dateTime" returns="text">
        <key>sql.dateTime.dayname</key>
        <value>DAYNAME</value>
        <signature><![CDATA[dayname(${datetime})]]></signature>
        <parameters>
            <parameter column="true" name="datetime" defaultValue="timestamp '2007-02-03 09:00:00'"/>
        </parameters>
        <description>Retruns the name of the week day for date/dateTime. Example:  dayname(timestamp '2007-02-03 09:00:00')/dayname(date '2007-02-03') result: 'Saturday'</description>
    </function>
	
	<function group="db2 specific" returns="numeric">
        <key>sql.dateTime.dayOfMonth</key>
        <value>DAY_OF_MONTH</value>
        <signature><![CDATA[DAYOFMONTH(${column})]]></signature>
        <parameters>
            <parameter column="true" name="column"/>
	    </parameters>
        <description>The DAYOFMONTH function returns the day part of a value. The function is similar to the DAY function, except DAYOFMONTH does not support a date or timestamp duration as an argument. Eg: ('2015-05-15 11:23:00') returns '15'. NOTE:column's value should be in single quotes if you are typing the value.</description>
    </function>
	<function group="dateTime" returns="numeric">
        <key>sql.dateTime.dayofweek</key>
        <value>DAYOFWEEK</value>
        <signature><![CDATA[cast(TO_CHAR(${datetime}, 'D') as int)]]></signature>
        <parameters>
            <parameter column="true" name="datetime" defaultValue="timestamp '2007-02-03 09:00:00'"/>
        </parameters>
        <description>Returns the ISO day of the week for date/datetime. The value ranges from 1 (SUNDAY) to 7 (SATURDAY). Example: cast(TO_CHAR(TIMESTAMP '2019-07-20 09:00:00','D')as int) result: 7</description>
    </function>
	<function group="dateTime" returns="text">
        <key>sql.dateTime.format</key>
        <value>FORMAT</value>
        <signature><![CDATA[TO_CHAR(${datetime},${format})]]></signature>
        <parameters>
            <parameter column="true" name="datetime" defaultValue="timestamp '2014-03-08 09:00:00'"/>
			<parameter column="true" name="format" defaultValue="'YYYY/MM/DD HH:MI:SS'"/>
        </parameters>
        <description>Return a TIMESTAMP format as a string.Example: TO_CHAR(TIMESTAMP '2019-07-20 09:10:20', 'YYYY/MM/DD HH24:MI:SS') result:2019/07/20 09:10:20. Example2 : TO_CHAR(TIMESTAMP '2019-07-20 09:10:20', 'YYYY') result:2019.  Example3 :  TO_CHAR(TIMESTAMP '2019-07-20 09:10:20', 'YYYY-MM') result:2019-07. </description>
    </function>
	<function group="db2 specific" returns="numeric">
        <key>sql.date.dayOfYear</key>
        <value>DAY_OF_YEAR</value>
        <signature><![CDATA[DAYOFYEAR(${column})]]></signature>
        <parameters>
            <parameter column="true" name="column"/>
	    </parameters>
        <description>The DAYOFYEAR function returns an integer, in the range of 1 to 366, that represents the day of the year, where 1 is January 1. Eg:  DAYOFYEAR('2018-07-16') returns '197'. NOTE:column's value should be in single quotes if you are typing the value.</description>
    </function>
	<function group="db2 specific" returns="numeric">
        <key>sql.date.days</key>
        <value>DAYS</value>
        <signature><![CDATA[DAYS(${column})]]></signature>
        <parameters>
            <parameter column="true" name="column"/>
	    </parameters>
        <description>The DAYS function returns an integer representation of a date. Eg:  DAYOFYEAR('2018-07-16') returns '739861'. NOTE:column's value should be in single quotes if you are typing the value.</description>
    </function>
	
	<!-- Time functions-->
	
	
	<!-- other functions-->
	<function group="db2 specific" returns="other">
        <key>sql.other.coalesce</key>
        <value>COALESCE</value>
        <signature><![CDATA[COALESCE(${column},${nullReplacer})]]></signature>
        <parameters>
           <parameter column="true" name="column"/>
			<parameter column="true" name="nullReplacer"/>
        </parameters>
        <description>This function returns the first non-NULL expression among its arguments.If all expressions evaluate to null, then the COALESCE function returns null. NOTE:expressions should be in single quotes if you are typing value.Eg:COALESCE(20,0) results: 20, COALESCE(null,0) results: 0</description>
    </function>
	<!-- <function group="db2 specific" returns="other">
        <key>sql.other.ifNull</key>
        <value>IF_NULL</value>
        <signature><![CDATA[IFNULL(${column},${nullReplacer})]]></signature>
        <parameters>
           <parameter column="true" name="column"/>
			<parameter column="true" name="nullReplacer"/>
        </parameters>
        <description>The IFNULL function returns the first nonnull expression.. NOTE:expressions should be in single quotes if you are typing value.Eg:IFNULL(20,0) results: 20, COALESCE(null,0) results: 0</description>
    </function>-->
	<function group="db2 specific" returns="other">
        <key>sql.other.decode</key>
        <value>DECODE</value>
        <signature><![CDATA[DECODE(${compareExp},${matchExp1},${resultExp1},${matchExp2},${resultExp2},${elseResult})]]></signature>
        <parameters>
           
			<parameter column="true" name="compareExp"/>
			<parameter column="true" name="matchExp1"/>
			<parameter column="true" name="resultExp1"/>
			<parameter column="true" name="matchExp2"/>
			<parameter column="true" name="resultExp2"/>
			<parameter column="true" name="elseResult"/>
			
        </parameters>
        <description>The DECODE function compares each matchExp to compareExp. If matchExp1 is equal to compareExp, or both matchExp1 and compareExp are null, the value of the resultExp1 is returned. If matchExp2 matches compareExp, the value of resultExp2 is returned. Otherwise a elseResult value is returned. NOTE:expressions and values should be in single quotes if you are typing text value.Eg:DECODE(7, 7, 'A', 6, 'B', 'C') results: 'A', DECODE(6, 7, 'A', 6, 'B', 'C') results: 'B'</description>
    </function>
	<function group="db2 specific" returns="other">
        <key>sql.other.nullIf</key>
        <value>NULLIF</value>
        <signature><![CDATA[NULLIF(${column},${column2})]]></signature>
        <parameters>
           <parameter column="true" name="column"/>
			<parameter column="true" name="column2"/>
        </parameters>
        <description>The NULLIF function returns the null value if the two arguments are equal; otherwise, it returns the value of the first argument. Eg:NULLIF(123,123) results: null, NULLIF(123,129) results: 123</description>
    </function>
	<function group="db2 specific" returns="other">
        <key>sql.other.nvl</key>
        <value>NVL</value>
        <signature><![CDATA[NVL(${column},${column2})]]></signature>
        <parameters>
           <parameter column="true" name="column"/>
			<parameter column="true" name="column2"/>
        </parameters>
        <description>The NVL function returns the first argument that is not null. Eg:NULLIF(123,123) results: null, NULLIF(123,129) results: 123, NVL(NULL,129) RESULTS: 129</description>
    </function>
	<function group="db2 specific" returns="other">
        <key>sql.other.value</key>
        <value>VALUE</value>
        <signature><![CDATA[VALUE(${column},${column2})]]></signature>
        <parameters>
           <parameter column="true" name="column"/>
			<parameter column="true" name="column2"/>
        </parameters>
        <description>The VALUE function returns the value of the first non-null expression. Eg:VALUE(NULL,'abcd') results: 'abcd', </description>
    </function>
	<!--  Conditional functions-->
	<!--function group="db2 specific" returns="text">
        <key>sql.conditional.case</key>
        <value>CASE</value>
        <signature><![CDATA[(CASE WHEN ${actualValue} ${operator} ${expectedValue} THEN ${assignValue} ELSE ${elseValue} END)]]></signature>
        <parameters>
            <parameter column="true" name="actualValue"/>
			<parameter column="true" name="operator"/>
			<parameter column="true" name="expectedValue"/>
			<parameter column="true" name="assignValue"/>
			<parameter column="true" name="elseValue"/>
        </parameters>
        <description>This function compares 'actualValue' and 'expectedValue' based on the operator if condition succeeds then changes the 'actualValue' to 'assignValue' else 'elseValue'. Note:All Values should be in single quotes if you are typing the value.</description>
    </function-->
	
	<!--function group="db2 specific" returns="text">
        <key>sql.conditional.case_not_equals</key>
        <value>CASE_NOT_EQUALS</value>
        <signature><![CDATA[(CASE WHEN ${actualValue} <>${compareValue} THEN ${changeValue} ELSE ${actualValue} END)]]></signature>
        <parameters>
            <parameter column="true" name="actualValue"/>
			<parameter column="true" name="compareValue"/>
			<parameter column="true" name="changeValue"/>
        </parameters>
        <description>This function compares 'actualValue' and 'compareValue' if both are not equal then changes the 'actualValue' to 'changeValue' other wise 'actualValue' remains same. Note:All Values should be in single quotes if you are typing the value.</description>
    </function-->
	<!--  TypeConvertion -->
	
	<function group="type conversion" returns="text">
        <key>sql.typeConversion.cast</key>
        <value>CAST</value>
        <signature><![CDATA[CAST(${column} AS ${dataType})]]></signature>
        <parameters>
            <parameter column="true" name="column"/>
			<parameter column="false" name="dataType"/>
        </parameters>
        <description>Cast function converts one dataType to another datatype. Note:All Values should be in single quotes if user provide's value.Example: CAST('2019-03-22 17:34:03.000' AS varchar(23)) result:2019-03-22 17:34:03.000</description>
    </function>
	
	<function group="type conversion" returns="text">
        <key>sql.typeConversion.tochar</key>
        <value>TOCHAR</value>
        <signature><![CDATA[CHAR(${column})]]></signature>
        <parameters>
            <parameter column="true" name="column"/>
        </parameters>
        <description>Converts value to char type. NOTE:field should be in single quotes if you are typing manually.Example1:char(date '2019-11-22')result:2019-11-22 Example2:char(12345) result:'12345'</description>
    </function>
	
	<function group="type conversion" returns="numeric">
        <key>sql.typeConversion.tonum</key>
        <value>TONUM</value>
        <signature><![CDATA[INT(${column})]]></signature>
        <parameters>
            <parameter column="true" name="column"/>
        </parameters>
        <description>This function is used to convert character based integer value to integer type.(format is not required)Example:INT('456') result:456</description>
    </function>
	
	<function group="type conversion" returns="date">
        <key>sql.typeConversion.todate</key>
        <value>TODATE</value>
        <signature><![CDATA[CAST(${column} AS DATE)]]></signature>
        <parameters>
            <parameter column="true" name="column"/>
        </parameters>
        <description>This function is used to convert character based date value to date type.(format is not required)Example:CAST('2018-08-30' as DATE) result:2018-08-30</description>
    </function>
	
	<function group="type conversion" returns="dateTime">
        <key>sql.typeConversion.todatetime</key>
        <value>TODATETIME</value>
        <signature><![CDATA[CAST(${column} AS TIMESTAMP)]]></signature>
        <parameters>
            <parameter column="true" name="column"/>
        </parameters>
        <description>This function is used to convert character based dateTime value to dateTime type.(format is not required)Example:CAST('2018-08-30 10:15:30' as TIMESTAMP) result:2018-08-30 10:15:30</description>
    </function>
	
	 <function group="type conversion" returns="numeric">
        <key>sql.typeConversion.todecimal</key>
        <value>TODECIMAL</value>
        <signature><![CDATA[cast(${column} AS DECIMAL)]]></signature>
        <parameters>
            <parameter column="true" name="column"/>
        </parameters>
        <description>Converts the value to decimal type. Example: cast(23.3 as decimal) result: 23</description>
    </function>
	
	<function group="type conversion" returns="time">
        <key>sql.typeConversion.totime</key>
        <value>TOTIME</value>
        <signature><![CDATA[CAST(${column} AS TIME)]]></signature>
        <parameters>
            <parameter column="true" name="column"/>
        </parameters>
        <description>This function is used to convert character based time value to time type.(format is not required) Example:CAST('10:15:30' as TIME) result:10:15:30</description>
    </function>

   <!--  TypeConvertion -->

	<!--Conversion specific functions must be there for every xml file starts-->  
 <function group="db2 specific" returns="text">
      <key>sql.text.dateToString</key>
      <value>dateToString</value>
      <signature><![CDATA[to_char(${column}, 'YYYY-MM-DD')]]></signature>
      <parameters>
         <parameter column="true" name="column" />
      </parameters>
      <description>Converts the date to string</description>
   </function>
   
    <function group="db2 specific" returns="text">
      <key>sql.text.numericToString</key>
      <value>numericToString</value>
      <signature><![CDATA[TO_CHAR(${column})]]></signature>
      <parameters>
         <parameter column="true" name="column" />
      </parameters>
      <description>Converts the number to string</description>
   </function>
   
    <function group="db2 specific" returns="text">
      <key>sql.text.dateTimeToString</key>
      <value>dateTimeToString</value>
      <signature><![CDATA[to_char(${column}, 'YYYY-MM-DD HH12:MI:SS')]]></signature>
      <parameters>
         <parameter column="true" name="column" />
      </parameters>
      <description>Converts the datetime to string</description>
   </function>
   
   <function group="db2 specific" returns="text">
      <key>sql.text.timeToString</key>
      <value>timeToString</value>
      <signature><![CDATA[to_char(${column}, 'HH12:MI:SS')]]></signature>
      <parameters>
         <parameter column="true" name="column" />
      </parameters>
      <description>Converts the time to string</description>
   </function>
    <function group="db2 specific" returns="other">
      <key>sql.text.otherToString</key>
      <value>otherToString</value>
      <signature><![CDATA[TO_CHAR(${column})]]></signature>
      <parameters>
         <parameter column="true" name="column" />
      </parameters>
      <description>Converts the other to string(varchar).</description>
   </function>
<!--Conversion specific functions must be there for every xml file ends-->
	
	<!-- Logical (start)-->
<function group="logical" returns="text">
        <key>sql.logical.and</key>
        <value>AND</value>
        <signature><![CDATA[AND (${column} ${condition} ${value}) ${moreconditions} ]]></signature>
        <parameters>
            <parameter column="true" name="column"/>
				<parameter name="condition"  defaultValue=""/>
				<parameter name="value"  defaultValue=""/>
			<parameter column="true" name="moreconditions" defaultValue=""/>
			</parameters>
        <description>Inside IF we will use AND condition. performs a logical conjunction on two expressions.
            In 'column' paramter we will 'drag column'.
			In 'condition' parameter provide conditions like (>,= etc.,like).
			In 'value' parameter provide condition value.
			In 'moreconditions' parameter we will use nested 'OR' condition , 'AND' conditions. 
			Example: CASE WHEN 'Washington' like '%sh%' 
             AND 'Washington' like 'W%' THEN 'return washington' 
             else 'NotMatched' end  </description>
    </function>
   <function group="logical" returns="text">
            <key>sql.logical.case</key>
            <value>CASE</value>
            <signature><![CDATA[(CASE ${condition} END)]]></signature>
            <parameters>
				<parameter column="true" name="condition"/>
            </parameters>
            <description>Inside case we will use when condition. Evaluates each condition from left to right and returns the result when the first condition met. If no condition met return from else if exist, otherwise return null. Example : CASE WHEN Quantity > 30 THEN "The quantity is greater than 30"  ELSE "The quantity is under 30" END </description>
    </function>
    <function group="logical" returns="text">
            <key>sql.logical.else</key>
            <value>ELSE</value>
            <signature><![CDATA[ELSE ${statement_list}]]></signature>
            <parameters>
				<parameter column="true" name="statement_list"/>
            </parameters>
            <description>Returns from statement_list when condition gets fail.We will use ELSE inside case function. Example: CASE when 50 > 0 then 'true' else 'false'</description>
    </function>
    <function group="logical" returns="text">
            <key>sql.logical.elseif</key>
            <value>ELSEIF</value>
            <signature><![CDATA[(case when ${column} ${condition} ${value} then ${conditiontrue} when ${elseIfcolumn} ${elseIfcondition} ${elseIfvalue} then ${elseIfconditiontrue} else ${conditionfalse} ${moreconditions} end)]]></signature>
            <parameters>
                <parameter column="true" name="column"/>
				<parameter name="condition" defaultValue=""/>
				<parameter name="value" defaultValue=""/>
				<parameter column="true" name="conditiontrue"/>
				<parameter column="true" name="elseIfcolumn"/>
				<parameter name="elseIfcondition" defaultValue=""/>
				<parameter name="elseIfvalue" defaultValue=""/>
				<parameter column="true" name="elseIfconditiontrue"/>
				<parameter column="true" name="conditionfalse" defaultValue=""/>
				<parameter column="true" name="moreconditions" defaultValue=""/>
            </parameters>
            <description>Evaluates conditions and returns 'conditiontrue' if condition is true, otherwise return 'conditionfalse'.  We will use nested condition inside else 'conditiontrue' parameter. Example:case when creditlim > 50000 then 'PLATINUM' else when (creditlim > = 50000) then 'GOLD' else 'SILVER' end </description>
    </function>
	
    <!--function group="logical" returns="text">
            <key>sql.logical.end</key>
            <value>END</value>
             <signature><![CDATA[(CASE ${expr} WHEN ${when} THEN ${then} ELSE ${else} END)]]></signature>
            <parameters>
                <parameter column="true" name="expr"/>
				<parameter column="true" name="when"/>
				<parameter column="true" name="then"/>
				<parameter column="true" name="else"/>
            </parameters>
            <description>Tests a series of expressions returning the "then" value for the first true "exp".</description>
    </function-->
	<!--function group="logical" returns="text">
            <key>sql.logical.if</key>
            <value>IF</value>
             <signature><![CDATA[if(${column} ${condition} ${value} ${moreconditions} THAN ${conditiontrue} ELSE ${conditionfalse})]]></signature>
            <parameters>
                <parameter column="true" name="column"/>
				<parameter name="condition" defaultValue=""/>
				<parameter name="value" defaultValue=""/>
				 <parameter column="true" name="moreconditions" defaultValue=""/>
				<parameter column="true" name="conditiontrue" defaultValue=""/>
				<parameter column="true" name="conditionfalse"/>
            </parameters>
            <description>Inside IF we will use AND, OR conditions. Evaluates and returns 'conditiontrue' if condition is true, otherwise return 'conditionfalse'. 
			In 'column' paramter we will drag column.
			In 'condition' parameter provide conditions like (>,= etc.,).
			In 'value' parameter provide value.
			In 'moreconditions' parameter we will use nested 'OR', 'AND' conditions. Instead of dragging column directly we will write expression in column parameter like 50 > 0 (Note : In such case don't provide anything in 'condition' parameter and 'value' parameter). Example : IF (creditlim > 50000) 'PLATINUM','SILVER'</description>
    </function-->
	<function group="logical" returns="text">
            <key>sql.logical.if</key>
            <value>IF</value>
             <signature><![CDATA[(case when ${column} ${condition} ${value} ${moreconditions} then ${conditiontrue} else ${conditionfalse} end)]]></signature>
            <parameters>
                <parameter column="true" name="column"/>
				<parameter name="condition" defaultValue=""/>
				<parameter name="value" defaultValue=""/>
				 <parameter column="true" name="moreconditions" defaultValue=""/>
				<parameter column="true" name="conditiontrue" defaultValue=""/>
				<parameter column="true" name="conditionfalse"/>
            </parameters>
            <description>Inside IF we will use AND, OR conditions. Evaluates and returns 'conditiontrue' if condition is true, otherwise return 'conditionfalse'. 
			In 'column' paramter we will drag column.
			In 'condition' parameter provide conditions like (>,= etc.,).
			In 'value' parameter provide value.
			In 'moreconditions' parameter we will use nested 'OR', 'AND' conditions. Instead of dragging column directly we will write expression in column parameter like 50 > 0 (Note : In such case don't provide anything in 'condition' parameter and 'value' parameter). Example : (Case when (creditlim > 50000) then 'PLATINUM' else 'SILVER' end)</description>
    </function>
    <function group="logical" returns="text">
            <key>sql.logical.ifnull</key>
            <value>IFNULL</value>
            <signature><![CDATA[(coalesce(${expr1}, ${expr2}))]]></signature>
            <parameters>
                <parameter column="true" name="expr1"/>
				<parameter column="true" name="expr2"/>
            </parameters>
            <description>Returns Expr1 if it is not null otherwise return expr2. Example : IFNULL(profit, '0')</description>
    </function>
 
	 <function group="logical" returns="text">
            <key>sql.logical.iif</key>
            <value>IIF</value>
             <signature><![CDATA[(case when ${column} ${condition} ${value} then ${conditiontrue} else ${conditionfalse} end)]]></signature>
            <parameters>
                <parameter column="true" name="column"/>
				<parameter name="condition" defaultValue=""/>
				<parameter name="value" defaultValue=""/>
				<parameter column="true" name="conditiontrue"/>
				<parameter column="true" name="conditionfalse"/>
            </parameters>
            <description>Evaluates and returns 'conditiontrue' if condition is true, otherwise return 'conditionfalse'. Example : case when 'washington'like 'W%' then 'true' else 'false' end</description>
    </function>
    <!--<function group="Logical" returns="numeric">
            <key>sql.logical.isdate</key>
            <value>ISDATE</value>
            <signature><![CDATA[var_pop(${value})]]></signature>
            <parameters>
                <parameter column="true" name="value"/>
            </parameters>
            <description></description>
    </function> -->
    <function group="logical" returns="boolean">
            <key>sql.logical.isnull</key>
            <value>ISNULL</value>
            <signature><![CDATA[IS NULL]]></signature>
            <parameters>
             </parameters>
            <description>Inside WHEN condition we will use ISNULL. Evalutes and returns 'Conditiontrue' if the expression contain Null. Example1 : CASE WHEN 1 ISNULL THEN Conditionfalse. Example2 : CASE WHEN NULL ISNULL THEN Conditiontrue </description>
		</function>	
    <function group="logical" returns="boolean">
            <key>sql.logical.not</key>
            <value>NOT</value>
            <signature><![CDATA[NOT(${column} ${condition} ${value})]]></signature>
            <parameters>
                <parameter column="true" name="column"/>
				<parameter column="true" name="condition" defaultValue=""/>
				<parameter column="true" name="value" defaultValue=""/>
            </parameters>
            <description>Evaluates and returns 'conditiontrue' if condition is false, otherwise returns 'conditionfalse'. We will use NOT inside IF. Example :  NOT(500 > 1000) result :true</description>
    </function>
    <function group="logical" returns="numeric">
            <key>sql.logical.or</key>
            <value>OR</value>
            <signature><![CDATA[ OR ${column} ${condition} ${value} ${moreconditions}]]></signature>
            <parameters>
                <parameter column="true" name="column"/>
				<parameter column="true" name="condition" defaultValue=""/>
				<parameter column="true" name="value" defaultValue=""/>
				<parameter column="true" name="moreconditions" defaultValue=""/>
            </parameters>
            <description>Performs a logical disjunction on two expressions. 
			In 'column' paramter we will drag column.
			In 'condition' parameter provide conditions like (>,= etc.,).
			In 'value' parameter provide value.
			In 'moreconditions' parameter we will use nested 'OR' , 'AND' functions. Instead of dragging column directly we will write expression in column parameter like 50 > 0 in such case don't provide anything in 'condition' and 'value' parameter. We will use OR inside IF. Example : CASE WHEN 'Washington' like '%sh%' 
             OR  'Washington' like 'W%' THEN 'return washington' 
             else 'NotMatched' end</description>
    </function>
    <!--function group="logical" returns="numeric">
            <key>sql.logical.then</key>
            <value>THEN</value>
            <signature><![CDATA[THEN ${then}]]></signature>
            <parameters>
				<parameter column="true" name="then"/>
            </parameters>
            <description>Tests a series of expressions returning the "then" value for the first true "exp". Example : CASE ['RomanNumber'] WHEN 'R' THEN 1 ELSE 3 NOTE: column's value should be in quotes if the values is manually typing</description>
    </function-->
		 <function group="logical" returns="numeric">
				<key>sql.logical.when</key>
				 <value>WHEN</value>
				 <signature><![CDATA[WHEN ${column} ${searchcondition} ${value} THEN ${statement_list}  ${moreconditions}]]></signature>
				<parameters>
					<parameter column="true" name="column"/>
					<parameter column="true" name="searchcondition" defaultValue=""/>
					<parameter column="true" name="value" defaultValue=""/>
					<parameter column="true" name="statement_list"/>
					<parameter column="true" name="moreconditions" defaultValue=""/>
				</parameters>
				<description>Returns 'statement_list' when condition get satisfied .
				In column paramter we will drag column.
				In searchcondition parameter provide conditions like (>, =, IS Null etc .,).
				In value parameter provide value(Note : IS Null used in 'condition' parameter then don't provide anything in 'value' parameter). 
				In moreconditions parameter we will use nested when conditions, Else condition . We will use WHEN inside CASE. Example1 : CASE WHEN 1 > 0  THEN 'one' else 'TWO'. Example2 : CASE WHEN 'Singapore' IS NULL THEN 'Singa' ELSE 'pore'. Example3 : CASE WHEN Washington like '%sh%' THEN 'return washington' else 'NotMatched' </description>
		</function>
	<!--function group="logical" returns="numeric">
            <key>sql.logical.then</key>
			 <value>THEN</value>
             <signature><![CDATA[THEN ${value} ${moreconditions}]]></signature>
            <parameters>
				<parameter column="true" name="value" defaultValue=""/>
		
				<parameter column="true" name="moreconditions" defaultValue=""/>
            </parameters>
            <description>Returns 'value' when the condition get satisfied. we use 'then' inside when condition
			 Example1 : CASE WHEN 'Singapore' IS NULL THEN 'Singa' ELSE 'pore'. Example3 : CASE WHEN Washington like '%sh%' THEN 'return washington' else 'NotMatched' </description>
    </function-->
<function group="logical" returns="text">
            <key>sql.logical.zn</key>
            <value>ZN</value>
            <signature><![CDATA[(CASE WHEN ${expr} IS NULL THEN '0' ELSE ${expr} end)]]></signature>
            <parameters>
                <parameter column="true" name="expr"/>
            </parameters>
            <description>Returns "expression" if it is not null, otherwise returns zero.Example :ZN(null) result :0 </description>
    </function>
    <!-- Logical (end)-->
</functions>
