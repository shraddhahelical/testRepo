<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<!-- Return type for each function node can be the following 

	"numeric", "text", "date", "time","dateTime","boolean","other" 
	
	-->
<functions dialect="org.hibernate.dialect.MySQLDialect" type="sql">
     
	
	 <function group="numeric" returns="numeric">
        <key>sql.numeric.abs</key>
        <value>ABS</value>
        <signature><![CDATA[abs(${number})]]></signature>
        <parameters>
            <parameter column="true" name="number"/>
        </parameters>
        <description>It returns the absolute value of a number. Example: abs(-24)Result: 24</description>
    </function>
	
	<function group="numeric" returns="numeric">
        <key>sql.numeric.acos</key>
        <value>ACOS</value>
        <signature><![CDATA[acos(${number})]]></signature>
        <parameters>
            <parameter column="true" name="number"/>
        </parameters>
        <description>Returns the arc cosine of number. Example: acos(0.25) result: 1.318116071652818 </description>
    </function>
	
	<function group="numeric" returns="numeric">
        <key>sql.numeric.asin</key>
        <value>ASIN</value>
        <signature><![CDATA[asin(${number})]]></signature>
        <parameters>
            <parameter column="true" name="number"/>
        </parameters>
        <description>Returns the arc sine of number. Example: asin(0.25) result: 0.25268025514207865 </description>
    </function>
	<function group="numeric" returns="numeric">
        <key>sql.numeric.atan</key>
        <value>ATAN</value>
        <signature><![CDATA[atan(${number})]]></signature>
        <parameters>
            <parameter column="true" name="number"/>
        </parameters>
        <description>Returns the arc tangent of number. Example: atan(0.25) result: 0.24497866312686414 </description>
    </function>
	<function group="numeric" returns="numeric">
        <key>sql.numeric.atan2</key>
        <value>ATAN2</value>
        <signature><![CDATA[atan2(${number1},${number2})]]></signature>
        <parameters>
            <parameter column="true" name="number1"/>
			<parameter column="true" name="number2"/>
        </parameters>
        <description>Returns the arc tangent of given number. Example: atan2(0.50,1) result: 0.4636476090008061</description>
    </function>
	
    <function group="numeric" returns="numeric">
        <key>sql.numeric.round</key>
        <value>ROUND</value>
        <signature><![CDATA[round(${number}, ${decimalpoint})]]></signature>
        <parameters>
            <parameter column="true" name="number"/>
            <parameter defaultValue="1" name="decimalpoint"/>
        </parameters>
        <description>Displays a value rounded to a certain number of decimal places. Example: round(34.4158,2) result: 34.42</description>
    </function>

    <function group="numeric" returns="numeric">
        <key>sql.numeric.ceiling</key>
        <value>CEILING</value>
        <signature><![CDATA[ceiling(${number})]]></signature>
        <parameters>
            <parameter column="true" defaultValue="0" name="number"/>
        </parameters>
        <description>Returns number rounded up to the nearest integer. Example: ceiling(0.25) result: 1 </description>
    </function>

	<function group="numeric" returns="numeric">
        <key>sql.numeric.cos</key>
        <value>COS</value>
        <signature><![CDATA[cos(${number})]]></signature>
        <parameters>
            <parameter column="true" name="number"/>
        </parameters>
        <description>Returns the cosine of number. Example: cos(0.25) result: 0.9689124217106447 </description>
    </function>
	
	<function group="numeric" returns="numeric">
        <key>sql.numeric.cot</key>
        <value>COT</value>
        <signature><![CDATA[1/tan(${number})]]></signature>
        <parameters>
            <parameter column="true" name="number"/>
        </parameters>
        <description>Returns the cotangent of an angle. Specify the angle in radians. Example: 1/tan(0.25) result: 3.9163173646459399 </description>
    </function>
	
	<function group="numeric" returns="numeric">
        <key>sql.numeric.degrees</key>
        <value>DEGREES</value>
        <signature><![CDATA[(${number} * 180)/3.14159 ]]></signature>
        <parameters>
            <parameter column="true" name="number"/>
        </parameters>
        <description>Converts angle number in radians to degrees. Example: degrees(0.25) result: 14.32394487827058</description>
    </function>
	
	<function group="numeric" returns="numeric">
        <key>sql.numeric.div</key>
        <value>DIV</value>
        <signature><![CDATA[(${dividend} / NULLIF(${divisor}, 0))]]></signature>
        <parameters>
            <parameter column="true" name="divisor"/>
            <parameter column="true" name="dividend"/>
        </parameters>
        <description>Returns the integer part of a division operation. Example: (10/5) result: 2</description>
    </function>
	
	<function group="numeric" returns="numeric">
        <key>sql.numeric.exp</key>
        <value>EXP</value>
        <signature><![CDATA[exp(${number})]]></signature>
        <parameters>
            <parameter column="true" name="number"/>
        </parameters>
        <description>Returns Eulerâ€™s number raised to the power of the given number. Example: exp(2) result: 7.389</description>
    </function>
	
    <function group="numeric" returns="numeric">
        <key>sql.numeric.floor</key>
        <value>FLOOR</value>
        <signature><![CDATA[floor(${number})]]></signature>
        <parameters>
            <parameter column="true" defaultValue="0" name="number"/>
        </parameters>
        <description>Returns number rounded down to the nearest number. Example: floor(3.1415) result: 3 </description>
    </function>
	
		<function group="numeric" returns="numeric">
        <key>sql.numeric.ln</key>
        <value>LN</value>
        <signature><![CDATA[ln(${number})]]></signature>
        <parameters>
            <parameter column="true" name="number"/>
        </parameters>
        <description>Returns the natural logarithm of number. Example: ln(2) result: 0.6931471805599453 </description>
    </function>
	<function group="numeric" returns="numeric">
        <key>sql.numeric.log</key>
        <value>LOG</value>
        <signature><![CDATA[log10(${number})]]></signature>
        <parameters>
            <parameter column="true" name="number"/>
        </parameters>
        <description>Returns the base 10 logarithm of number. Example: log10(2) result: 0.3010299956639812 </description>
    </function>
	<function group="numeric" returns="numeric">
        <key>sql.numeric.max</key>
        <value>MAX</value>
        <signature><![CDATA[greatest(${number1},${number2})]]></signature>
        <parameters>
            <parameter column="true" name="number1"/>
            <parameter column="true" name="number2"/>
        </parameters>
        <description>Returns the largest of the provided values. Example: greatest(4,13) result: 13</description>
    </function>
	<function group="numeric" returns="numeric">
        <key>sql.numeric.min</key>
        <value>MIN</value>
        <signature><![CDATA[least(${number1},${number2})]]></signature>
        <parameters>
            <parameter column="true" name="number1"/>
            <parameter column="true" name="number2"/>
        </parameters>
        <description>Returns the smallest of the provided values. Example: least(13,4) result: 4</description>
    </function>
	<function group="numeric" returns="numeric">
        <key>sql.numeric.pi</key>
        <value>PI</value>
        <signature><![CDATA[(3.141592653589793)]]></signature>
        <parameters/>
        <description>Returns the constant Pi. Example: pi() result: 3.14159 </description>
    </function>

	<function group="numeric" returns="numeric">
        <key>sql.numeric.sign</key>
        <value>SIGN</value>
        <signature><![CDATA[sign(${number})]]></signature>
        <parameters>
            <parameter column="true" name="number"/>
        </parameters>
        <description>Returns the signum function of number, that is:
		0 if the argument is 0,
		1 if the argument is greater than 0,
		-1 if the argument is less than 0. Example: sign(0.5) result: 1.</description>
    </function>
	<function group="numeric" returns="numeric">
        <key>sql.numeric.sin</key>
        <value>SIN</value>
        <signature><![CDATA[sin(${number})]]></signature>
        <parameters>
            <parameter column="true" name="number"/>
        </parameters>
        <description>Returns the sine of number. Example: sin(0.25) result: 0.24740395925452294</description>
    </function>
	
   

    <function group="numeric" returns="numeric">
        <key>sql.numeric.power</key>
        <value>POWER</value>
        <signature><![CDATA[pow(${number},${exponent})]]></signature>
        <parameters>
            <parameter column="true" defaultValue="0" name="number"/>
            <parameter defaultValue="10" name="exponent"/>
        </parameters>
        <description>Displays the value of a number raised to the power of another number. Example: pow(4,2) result: 16</description>
    </function>

   <function group="numeric" returns="numeric">
        <key>sql.numeric.radians</key>
        <value>RADIANS</value>
        <signature><![CDATA[(${number} * 3.14159)/180]]></signature>
        <parameters>
            <parameter column="true" name="number"/>
        </parameters>
        <description>Converts the value of a number from degrees to radians. Example : radians(4) result : 0.06981317007977318</description>
    </function>

    <function group="numeric" returns="numeric">
        <key>sql.numeric.sqrt</key>
        <value>SQRT</value>
        <signature><![CDATA[sqrt(${number})]]></signature>
        <parameters>
            <parameter column="true" name="number"/>
        </parameters>
        <description>Displays the square root of a non-negative number. Example: sqrt(5) result: 2.23606797749979</description>
    </function>

	<function group="numeric" returns="numeric">
        <key>sql.numeric.square</key>
        <value>SQUARE</value>
        <signature><![CDATA[(${number} * ${number})]]></signature>
        <parameters>
            <parameter column="true" name="number"/>
			 <!--parameter column="true" name="squareValue"/-->
        </parameters>
        <description>It displays the square of a given number. Example: (4*4) result: 16</description>
    </function>
	
	<function group="numeric" returns="numeric">
        <key>sql.numeric.tan</key>
        <value>TAN</value>
        <signature><![CDATA[tan(${number})]]></signature>
        <parameters>
            <parameter column="true" name="number"/>
        </parameters>
        <description>Returns the tangent of number. Example: tan(0.25) result: 0.25534192122103627 </description>
    </function>
	
   <function group="numeric" returns="numeric">
        <key>sql.numeric.truncate</key>
        <value>TRUNCATE</value>
        <signature><![CDATA[trunc(${number},${digit})]]></signature>
        <parameters>
            <parameter column="true" defaultValue="0" name="number"/>
            <parameter defaultValue="10" name="digit"/>
        </parameters>
        <description>Displays a number truncated to a certain number of decimal places. Example: truncate(1.289,2) result: 1.28</description>
    </function>

    <function group="text" returns="numeric" >
        <key>sql.text.ascii</key>
        <value>ASCII</value>
        <signature><![CDATA[to_code_points(substr(${string},1, 1))[offset(0)]]]></signature>
        <parameters>
            <parameter column="true" name="string" defaultValue="'A'"/>
        </parameters>
        <description>Returns the Unicode of the first character of string. Example: ASCII('A') result:65</description>
    </function>
	
	<!--function group="text" returns="text" >
        <key>sql.text.char</key>
        <value>CHAR</value>
        <signature><![CDATA[cast(char(${number}) as CHAR)]]></signature>
        <parameters>
             <parameter column="true" name="number" defaultValue="65"/>
        </parameters>
        <description>Returns the character encoded by the ASCII code. Example:cast(char(65) as CHAR) result:A </description>
    </function-->

    <function group="text" returns="numeric">
        <key>sql.text.length</key>
        <value>LENGTH</value>
        <signature><![CDATA[length(${string})]]></signature>
        <parameters>
            <parameter column="true" name="string"/>
        </parameters>
        <description>Returns the number of characters in string. Example : LENGTH('Bengaluru') result:9  </description>
    </function>

    <function group="text" returns="text">
        <key>sql.text.lower</key>
        <value>LOWER</value>
        <signature><![CDATA[lower(${string})]]></signature>
        <parameters>
            <parameter column="true" name="string"/>
        </parameters>
        <description>Converts all characters in the specified string to lowercase. Example:  LOWER('BENGALURU') result: bengaluru</description>
    </function>

    <function group="text" returns="text">
        <key>sql.text.upper</key>
        <value>UPPER</value>
        <signature><![CDATA[upper(${string})]]></signature>
        <parameters>
            <parameter column="true" name="string"/>
        </parameters>
        <description>Converts all characters in a string to uppercase. Example: UPPER('bengaluru') result: BENGALURU.</description>
    </function>

    <function group="text" returns="text">
        <key>sql.text.trim</key>
        <value>TRIM</value>
        <signature><![CDATA[trim(${string})]]></signature>
        <parameters>
            <parameter column="true" name="string"/>
        </parameters>
        <description>It removes leading and trailing whitespace from string. Example: TRIM('   Bengaluru   ') result:Bengaluru
        </description>
    </function>

    <function group="text" returns="text">
        <key>sql.text.ltrim</key>
        <value>LTRIM</value>
        <signature><![CDATA[ltrim(${string})]]></signature>
        <parameters>
            <parameter column="true" name="string"/>
        </parameters>
        <description>Removes leading whitespace from string. Example: LTRIM('     Bengaluru') result: Bengaluru</description>
    </function>
	
	 <function group="text" returns="text">
        <key>sql.text.rtrim</key>
        <value>RTRIM</value>
        <signature><![CDATA[rtrim(${string})]]></signature>
        <parameters>
            <parameter column="true" name="string"/>
        </parameters>
        <description>Removes trailing whitespace from string. Example: RTRIM('Bengaluru   ') result: Bengaluru.
        </description>
    </function>
	
	<function group="text" returns="text">
        <key>sql.text.space</key>
        <value>SPACE</value>
        <signature><![CDATA[rpad(' ',${noOfSpace},' ')]]></signature>
        <parameters>
            <parameter column="true" defaultValue="1" name="noOfSpace"/>
        </parameters>
        <description>Returns a string consisting of space characters.Ex:rpad(' ',6,' ') -"      "</description>
    </function>
	
	<function group="text" returns="text">
        <key>sql.text.mid</key>
        <value>MID</value>
        <signature><![CDATA[substr(${string},${position},${length})]]></signature>
        <parameters>
            <parameter column="true" name="string"/>
			<parameter column="true" name="position"/>
			<parameter column="true" name="length"/>
        </parameters>
        <description>Returns the string starting from specified position. If position is more than string or length is less than 1 it will return empty string. Example: substr('Bengaluru', 2, 5) result: engal</description>
    </function>
	
	<function group="text" returns="text">
        <key>sql.text.replace</key>
        <value>REPLACE</value>
        <signature><![CDATA[replace(${string},${substring},${replacestring})]]></signature>
        <parameters>
            <parameter column="true" name="string"/>
			<parameter column="true" name="substring"/>
			<parameter column="true" name="replacestring"/>
        </parameters>
        <description>String search for substring and replace it with replacestring. If substring is not found, the string is not changed. Example: REPLACE('bengaluru','b','Z') result: Zengaluru</description>
    </function>
     <function group="text" returns="text">
        <key>sql.text.right</key>
        <value>RIGHT</value>
        <signature><![CDATA[substr(${string},length(${string})-3,${length})]]></signature>
        <parameters>
            <parameter column="true" name="string"/>
			<parameter column="true" name="length"/>
        </parameters>
        <description>Returns the rightmost character from the string. Example: right('bengaluru',4) result: 'luru'</description>
    </function>

    <function group="text" returns="text">
        <key>sql.text.lpad</key>
        <value>LPAD</value>
        <signature><![CDATA[lpad(${string},${length},${padString})]]></signature>
        <parameters>
            <parameter column="true" name="string"/>
            <parameter defaultValue="0" name="length"/>
            <parameter column="true" name="padString"/>
        </parameters>
        <description>Displays a string that is left padded with a specified string to a certain length. If length is less than string, return value is truncated to length characters. Example: LPAD('Wellesley', 14,'Hills') result:HillsWellesley. </description>
    </function>
	
	<function group="text" returns="text">
        <key>sql.text.left</key>
        <value>LEFT</value>
        <signature><![CDATA[substr(${string},1,${length})]]></signature>
        <parameters>
            <parameter column="true" name="string"/>
            <parameter defaultValue="0" name="length"/>
        </parameters>
        <description>Returns the left most characters in a string. Example: LEFT ('Bengaluru', 4) result:Beng. </description>
    </function>
	
	<function group="text" returns="numeric">
        <key>sql.text.find</key>
        <value>FIND</value>
        <signature><![CDATA[STRPOS(${string},${substring})]]></signature>
        <parameters>
            <parameter column="true" name="string"/>
			<parameter column="true" name="substring"/>
        </parameters>
        <description>Returns the starting position of the first instance of substring in string. Positions start with 1. If not found, 0 is returned. Example :position('z','Bengaluru') result : 0, position('aluru' IN 'Bengaluru') result : 5</description>
    </function>
	
	<function group="text" returns="boolean">
        <key>sql.text.endswith</key>
        <value>ENDSWITH</value>
        <signature><![CDATA[case when(${string} like concat('%',${substring})) then true else false end]]></signature>
        <parameters>
            <parameter column="true" name="string"/>
            <parameter column="true" name="substring"/>
        </parameters>
        <description>Returns true if the given string endswith specified substring. Example:case when('postgres' like concat('%','res')) then true else false end result: true. Note:Please provide single quotes if you are directly typing the substring value.</description>
    </function>
	
	<function group="text" returns="boolean">
        <key>sql.text.startswith</key>
        <value>STARTSWITH</value>
        <signature><![CDATA[case when(${string} like concat(${substring},'%')) then true else false end]]></signature>
        <parameters>
            <parameter column="true" name="string"/>
            <parameter column="true" name="substring"/>
        </parameters>
        <description>Returns true if string starts with substring. Example: case when('bengaluru' like concat('ben','%')) then true else false end result: true.  Note:Please provide single quotes if you are directly typing the substring value.</description>
    </function>
	
	<!--function group="text" returns="numeric">
        <key>sql.text.findnth</key>
        <value>FINDNTH</value>
       <signature><![CDATA[case when (instr(${string},SUBSTRING_INDEX(${string}, ${substring}, ${th_appeareance}))+length(substring_index(${string},
${substring},${th_appeareance}))) > length(${string}) then -1 else (instr(${string},SUBSTRING_INDEX(${string}, ${substring}, ${th_appeareance}))+length(substring_index(${string},
${substring},${th_appeareance}))) end ]]></signature>
        <parameters>
		    <parameter column="true" name="string"/>
			<parameter column="true" name="substring"/>
			<parameter column="true" name="th_appeareance" defaultValue="2" type="numeric"/>
        </parameters>
        <description>Returns the position of the nth occurrence of substring within the specified string, where th_appeareance is defined by the occurrence argument. Example : case when (instr('calculation',SUBSTRING_INDEX('calculation', 'c', 2))+length(substring_index('calculation',
'c',2))) greaterthan length('calculation') then -1 else (instr('calculation',SUBSTRING_INDEX('calculation', 'c', 2))+length(substring_index('calculation',
'c',2))) end result : 4.note: negative value indicates absence of the substring. note 2:replace greaterthan with symbol.</description>
    </function-->
	
	<!--function group="text" returns="text">
        <key>sql.text.split</key>
        <value>SPLIT</value>
        <signature><![CDATA[ (REPLACE(SUBSTRING(SUBSTRING_INDEX(${string}, ${delimiter}, ${index}),
                LENGTH(SUBSTRING_INDEX(${string}, ${delimiter}, ${index} -1)) + 1),
       ${delimiter}, ''))]]></signature>
        <parameters>
			<parameter column="true" name="string"/>
			<parameter column="true" name="delimiter"/>
			<parameter column="true" name="index"/>
        </parameters>
        <description>Splits string on delimiter and returns the field index. Field indexes start with 1. If the index is larger than the number of fields, then empty will return Example : (REPLACE(SUBSTRING(SUBSTRING_INDEX('Singa$Pore$Benga$Luru', '$', 2),LENGTH(SUBSTRING_INDEX('Singa$Pore$Benga$luru', '$', 2 -1)) + 1),'$', '')) result : Pore</description>
    </function-->
	
	<function group="text" returns="boolean">
        <key>sql.text.contains</key>
        <value>CONTAINS</value>
        <signature><![CDATA[(case when (STRPOS(${string},${substring})> 0) then true else false end) ]]></signature>
        <parameters>
            <parameter column="true" name="substring"/>
			<parameter column="true" name="string"/>
        </parameters>
        <description> Returns true if the given string contains the specified substring. Example : case when (STRPOS('bengaluru' IN 'a')> 0) then 'true' else 'false' end result:true</description>
    </function>
	
	<function group="text" returns="text">
        <key>sql.text.rpad</key>
        <value>RPAD</value>
        <signature><![CDATA[rpad(${string},${length},${padString})]]></signature>
        <parameters>
            <parameter column="true" name="string"/>
            <parameter defaultValue="0" name="length"/>
            <parameter column="true" name="padString"/>
        </parameters>
        <description>Displays a string that is right padded with a specified string to a certain length. If length is less than string, return value is truncated to length characters.Length must not be negative and padString must not be non-empty. Example:rpad('Wellesley', 15, 'Hills') result : Wellesley Hills . </description>
    </function>
	<function group="text" returns="text">
        <key>sql.text.reverse</key>
        <value>REVERSE</value>
        <signature><![CDATA[reverse(${string})]]></signature>
        <parameters>
            <parameter column="true" name="string"/>
        </parameters>
        <description>Returns string with the characters in reverse order. Example: REVERSE('Bengaluru')  result : urulagneB </description>
    </function>
	
	

   <!-- <function group="text" returns="text">
        <key>sql.text.case</key>
        <value>case</value>
        <signature><![CDATA[(case when ${column} = '${condition}' then ${targetColumn} end)]]></signature>
        <parameters>
            <parameter column="true" name="column"/>
            <parameter name="condition"/>
            <parameter column="true" name="targetColumn"/>
        </parameters>
        <description>It is used to apply a complex conditional construct in a stored program.</description>
    </function>-->

    <function group="text" returns="text">
        <key>sql.text.concat</key>
        <value>CONCAT</value>
        <signature><![CDATA[concat(${string1},${string2})]]></signature>
        <parameters>
            <parameter column="true" name="string1" defaultValue="'Beng'"/>
            <parameter column="true" name="string2" defaultValue="'aluru'"/>
        </parameters>
        <description>Returns the concatenation of string1, string2. Example: CONCAT('Beng','aluru') result : Bengaluru</description>
    </function>


	 <function group="date" returns="date">
        <key>sql.date.dateadd</key>
        <value>DATEADD</value>
        <signature><![CDATA[date_add(${date}, Interval ${value} ${unit})]]></signature>
        <parameters>
		    	<parameter column="true" name="date" defaultValue="date '2014-03-08'"/>
            <parameter column="true" name="value" defaultValue="2" type="numeric"/>
			 <parameter column="true" name="unit" defaultValue="year"/>
        </parameters>
        <description>Returns the specified date with the specified number of interval added to the specified date_part of that date.Example:date_add(date '2014-03-08',Interval 2 year) result:2016-03-08 supported units:day , week , month , quarter , year.</description>
    </function>
	
	<function group="date" returns="numeric">
        <key>sql.date.datediff</key>
        <value>DATEDIFF</value>
        <signature><![CDATA[DATE_DIFF(${date1},${date2}, ${unit})]]></signature>
        <parameters>
		    <parameter column="true" name="unit" defaultValue="year"/>
            <parameter column="true" name="date1" defaultValue="date '2014-03-08'"/>
			<parameter column="true" name="date2" defaultValue="date '2019-03-08'"/>
        </parameters>
        <description>Returns the difference between date1 and date2 by comparing the provided unit . Example:  DATE_DIFF(DATE '2014-03-08', DATE '2019-03-08', month) result: 84.</description>
    </function>
	
    <!--function group="date" returns="text">
        <key>sql.date.dayName</key>
        <value>DAYNAME</value>
        <signature><![CDATA[dayname(${date})]]></signature>
        <parameters>
            <parameter column="true" name="date" defaultValue="'2007-02-03'"/>
        </parameters>
        <description>Returns the name of the weekday for date. Example:  DAYNAME('2007-02-03') result: 'Saturday'</description>
    </function-->

	<function group="dateTime" returns="numeric">
        <key>sql.dateTime.day</key>
        <value>DAY</value>
        <signature><![CDATA[EXTRACT(DAY FROM ${datetime})]]></signature>
        <parameters>
            <parameter column="true" name="datetime" defaultValue="datetime '2007-02-03 09:00:00'"/>
        </parameters>
        <description>Returns day of the month for date/datetime (1-31). Example: day(timestamp '2014-03-08 09:00:00')/day(date '2014-03-08')result: 8</description>
    </function>
	
	<function group="date" returns="date">
        <key>sql.date.makedate</key>
        <value>MAKEDATE</value>
        <signature><![CDATA[case 
     when length(${year}) <> 0 OR length(${month}) <> 0 OR length(${day}) <> 0
	then cast(concat(${year},'-',${month},'-',${day}) AS date )
	else null end]]></signature>
        <parameters>
            <parameter column="true" name="year"/>
			<parameter column="true" name="month"/>
			<parameter column="true" name="day"/>
        </parameters>
        <description>Returns a date for given year, month and day. Example:  case 
     when length('2013') greaterthanLessthan 0 OR length('07') greater than less than 0 OR length('15') greater than less than 0
	then cast(concat('2013','-','07','-','15') AS date )
	else null end result : 2013-07-15 Note : Replace greaterthanLessthan with greaterthanLessthan symbols.</description>
    </function>
	
	<function group="date" returns="date">
        <key>sql.date.datetrunc</key>
        <value>DATETRUNC</value>
        <signature><![CDATA[DATE_TRUNC(${date}, ${unit})]]></signature>
        <parameters>
            <parameter column="true" name="date" defaultValue="date '2014-03-08'"/>
			<parameter column="true" name="unit" defaultValue="year"/>
       </parameters>
        <description>Truncates the specified date to the accuracy specified by the format(datepart). Example:DATE_TRUNC(DATE '2008-12-25', year) result: 2014-01-01, Example2: DATE_TRUNC(DATE '2008-12-25', MONTH) result: 20012-03-01</description>
    </function>
	
		<function group="date" returns="numeric">
        <key>sql.date.datepart</key>
        <value>DATEPART</value>
        <signature><![CDATA[extract(${unit} from ${date})]]></signature>
        <parameters>
            <parameter column="true" name="unit" defaultValue="year"/>
			<parameter column="true" name="date" defaultValue="date '2014-03-08'"/>
        </parameters>
        <description>Returns an integer that represents the specified unit of the specified date. Example: extract(year FROM date '2014-03-08') result: 2014. supported unit:YEAR, QUARTER, MONTH , WEEK , DAY, year_month</description>
    </function>
    
	<!--function group="date" returns="date">
        <key>sql.date.datetrunc</key>
        <value>DATETRUNC</value>
        <signature><![CDATA[DATE_FORMAT(${date}, '${unit}')]]></signature>
        <parameters>
            <parameter column="true" name="date" defaultValue="'2014-03-08'"/>
            <parameter column="true" name="unit" defaultValue="%Y-%m-01"/>
        </parameters>
        <description>Truncates the specified date to the accuracy specified by the unit. Example:date_trunc(year, '2014-03-08') result: 2014-01-01 supported units:millisecond, second, minute , hour , day , week , month , quarter , year.</description>
    </function-->

    <!--function group="date" returns="numeric">
        <key>sql.date.dayofweek</key>
        <value>DAYOFWEEK</value>
        <signature><![CDATA[dayofweek(${date})]]></signature>
        <parameters>
            <parameter column="true" name="date" defaultValue="'2007-02-03'"/>
        </parameters>
        <description>Returns the ISO day of the week for datetime. The value ranges from 1 (sunday) to 7 (saturday). Example: DAYOFWEEK('2007-02-03') result: 7.</description>
    </function-->
	
	 

	<function group="date" returns="date">
        <key>sql.date.today</key>
        <value>TODAY</value>
        <signature><![CDATA[CURRENT_DATE()]]></signature>
        <parameters/>
        <description>Displays Current date.</description>
    </function>


    
	
	<function group="dateTime" returns="dateTime">
        <key>sql.dateTime.datetimeadd</key>
        <value>DATETIMEADD</value>
        <signature><![CDATA[DATETIME_ADD(cast(${datetime} as datetime), INTERVAL ${value} ${unit})]]></signature>
        <parameters>
		    	<parameter column="true" name="datetime" defaultValue="datetime '2014-03-08 11:10:27'"/>
            <parameter column="true" name="value" defaultValue="2" type="numeric"/>
			 <parameter column="true" name="unit" defaultValue="year"/>
        </parameters>
        <description>Returns the specified datetime with the specified number interval added to the unit of that datetime. Example:DATETIME_ADD(DATETIME '2014-03-08 11:10:27', INTERVAL 2 year) result:2016-03-08 11:10:27 supported units:microsecond, second, minute , hour , day , week , month , quarter , year.</description>
		</function>
		
		
	 <function group="dateTime" returns="numeric">
        <key>sql.dateTime.datetimediff</key>
        <value>DATETIMEDIFF</value>
       <signature><![CDATA[DATETIME_DIFF(cast(${datetime1} as datetime),cast(${datetime2} as datetime), ${unit})]]></signature>
        <parameters>
			<parameter column="true" name="unit" defaultValue="year"/>
            <parameter column="true" name="datetime1" defaultValue="datetime '2014-03-08 09:00:00'"/>
			<parameter column="true" name="datetime2" defaultValue="datetime '2019-03-08 09:00:00'"/>
        </parameters>
        <description>Returns the difference between datetime1 and datetime2 with provided unit. Example:DATETIME_DIFF(DATETIME '2014-03-08 09:00:00',
    DATETIME '2019-03-08 09:00:00', year) result: 5.</description>
    </function>
	
	 <function group="dateTime" returns="text">
        <key>sql.dateTime.dayname</key>
        <value>DAYNAME</value>
        <signature><![CDATA[case when
		extract(DAYOFWEEK from ${datetime}) = 1 then 'Monday' when extract(DAYOFWEEK from ${datetime}) = 2 then 'Tuesday' when extract(DAYOFWEEK from ${datetime}) = 3 then 'Wednesday' when extract(DAYOFWEEK from ${datetime}) = 4 then 'Thursday' when extract(DAYOFWEEK from ${datetime}) = 5 then 'Friday' when extract(DAYOFWEEK from ${datetime}) = 6 then 'Saturday' when extract(DAYOFWEEK from ${datetime}) = 7 then 'Sunday' else null end]]></signature>
        <parameters>
            <parameter column="true" name="datetime" defaultValue="datetime '2007-02-03 09:00:00'"/>
        </parameters>
        <description>Retruns the name of the week day for date/dateTime. Example:  dayname(timestamp '2007-02-03 09:00:00')/dayname(date '2007-02-03') result: 'Saturday'</description>
    </function>
	
	<function group="dateTime" returns="numeric">
        <key>sql.dateTime.datetimepart</key>
        <value>DATETIMEPART</value>
        <signature><![CDATA[extract(${unit} from ${datetime})]]></signature>
        <parameters>
            <parameter column="true" name="unit" defaultValue="year"/>
			<parameter column="true" name="datetime" defaultValue="datetime '2014-03-08 12:32:42'"/>
        </parameters>
        <description>Returns an integer that represents the specified datepart of the specified datetime. Example: extract(year FROM timestamp '2014-03-08 12:32:42') result: 2014. supported date_part:YEAR, QUARTER, MONTH , WEEK , DAY, YEAR_MONTH,  MICROSECOND, SECOND, MINUTE, HOUR, MINUTE_SECOND, HOUR_MICROSECOND, DAY_SECOND.</description>
    </function>
	
	<function group="dateTime" returns="numeric">
        <key>sql.dateTime.month</key>
        <value>MONTH</value>
        <signature><![CDATA[Extract(month from ${datetime})]]></signature>
        <parameters>
            <parameter column="true" name="datetime" defaultValue="datetime '2007-02-03 09:00:00'"/>
        </parameters>
        <description>Returns the month of the year for date/dateTime. Example: month(timestamp '2007-02-03 09:00:00')/month(date '2007-02-03')  result: 2</description>
    </function>
	
	<function group="dateTime" returns="dateTime">
        <key>sql.dateTime.datetimetrunc</key>
        <value>DATETIMETRUNC</value>
        <signature><![CDATA[DATETIME_TRUNC(cast(${datetime} as datetime),${unit})]]></signature>
        <parameters>
            <parameter column="true" name="datetime" defaultValue="datetime '2014-03-08 12:20:19'"/>
			<parameter column="true" name="unit" defaultValue="day" />
       </parameters>
        <description>Truncates the specified datetime to the accuracy specified by the format(unit). Example:  DATETIME_TRUNC(DATETIME '2014-03-08 12:20:19', DAY) result :2014-03-08 00:00:00 </description>
    </function>
	
	<function group="dateTime" returns="numeric">
        <key>sql.dateTime.year</key>
        <value>YEAR</value>
        <signature><![CDATA[Extract(YEAR from ${datetime})]]></signature>
        <parameters>
            <parameter column="true" name="datetime" defaultValue="datetime '2007-02-03 09:00:00'"/>
        </parameters>
        <description>Returns the year for date/datetime. Example: year(timestamp '2014-03-08  09:00:00')/year(date '2014-03-08')  result: 2014</description>
    </function>

    <function group="dateTime" returns="text">
        <key>sql.dateTime.monthname</key>
        <value>MONTHNAME</value>
        <signature><![CDATA[FORMAT_DATETIME("%B",cast(${datetime} as datetime))]]></signature>
        <parameters>
            <parameter column="true" name="datetime" defaultValue="datetime '2007-02-03 09:00:00'"/>
        </parameters>
        <description>Returns the month name based on month number. The value ranges from 1 (January) to 12 (December).  Example: monthname(timestamp     '2007-02-03 09:00:00')/ monthname(date '2007-02-03') result: 'February'</description>
    </function>
	
	
     <function group="dateTime" returns="numeric">
        <key>sql.dateTime.dayofweek</key>
        <value>DAYOFWEEK</value>
        <signature><![CDATA[Extract(DAYOFWEEK from ${datetime})]]></signature>
        <parameters>
            <parameter column="true" name="datetime" defaultValue="datetime '2007-02-03 09:00:00'"/>
        </parameters>
        <description>Returns the ISO day of the week for date/datetime. The value ranges from 1 (sunday) to 7 (saturday). Example: dayofweek(timestamp '2007-02-03 09:00:00')/dayofweek('2007-02-03') result: 7.</description>
    </function>
	
	<function group="dateTime" returns="dateTime">
        <key>sql.dateTime.now</key>
        <value>NOW</value>
        <signature><![CDATA[CURRENT_DATETIME()]]></signature>
        <parameters/>
        <description>Displays Current date and time. This function equivalent to current_timestamp.</description>
    </function>
	
		<function group="dateTime" returns="text">
        <key>sql.dateTime.format</key>
        <value>FORMAT</value>
        <signature><![CDATA[FORMAT_DATETIME(${format}, cast(${datetime} as datetime))]]></signature>
        <parameters>
            <parameter column="true" name="datetime" defaultValue="datetime '2014-03-08 09:00:00'"/>
			<parameter column="true" name="format" defaultValue="'%F'"/>
        </parameters>
        <description>Return a DATETIME format as a string.Example: FORMAT_DATETIME(datetime '2014-03-08 09:00:00','%F') result:2014-03-08</description>
    </function>
	
	 <function group="dateTime" returns="dateTime">
        <key>sql.dateTime.parse</key>
        <value>PARSE</value>
        <signature><![CDATA[PARSE_DATETIME(${format}, ${string})]]></signature>
        <parameters>
            <parameter column="true" name="string" defaultValue="'2008-01-31 09:00:00'"/>
			<parameter column="true" name="format" defaultValue="'%Y-%m-%d %H:%M:%S'"/>
       </parameters>
        <description>Takes a string as input and displays a date in a specific format. Example:PARSE_DATETIME('%Y-%m-%d %H:%M:%S','2008-01-31 09:00:00') result: 2008-01-31 00:00:00 </description>
    </function>
	
	<function group="dateTime" returns="dateTime">
        <key>sql.dateTime.makedatetime</key>
        <value>MAKEDATETIME</value>
        <signature><![CDATA[(case 
     when length(${year}) <> 0 OR length(${month}) <> 0 OR length(${day}) <> 0 OR length(${hour}) <> 0 OR length(${minute}) <> 0 OR length(${second}) <> 0
	then CAST(concat(${year},'-', ${month},'-',${day},' ', ${hour},':', ${minute},':', ${second}) as datetime)
	else null end)]]></signature>
        <parameters>
            <parameter column="true" name="year" defaultValue="2013"/>
			<parameter column="true" name="month" defaultValue="7"/>
			<parameter column="true" name="day" defaultValue="15"/>
			<parameter column="true" name="hour" defaultValue="8"/>
			<parameter column="true" name="minute" defaultValue="15"/>
			<parameter column="true" name="second" defaultValue="23"/>
        </parameters>
        <description>Returns a datetime that combines a year,month,day,hour,min,sec. Example: case 
     when length('2013') greaterthanLessthan 0 OR length('07') greaterthanLessthan 0 OR length('15') greaterthanLessthan 0 OR length('08') greaterthanLessthan 0 OR length('15') greaterthanLessthan 0 OR length('23') greaterthanLessthan 0
	then CAST(concat('2013','-', '07','-','15',' ', '08',':', '15',':', '23') as timestamp)
	else null end result: 2013-7-15 8-15-23. Note : Replace greaterthanLessthan with greaterthanLessthan symbols.</description>
    </function>
	
	<function group="dateTime" returns="time">
        <key>sql.dateTime.maketime</key>
        <value>MAKETIME</value>
        <signature><![CDATA[(case 
     when length(${hour}) <> 0 OR length(${minute}) <> 0 OR length(${second}) <> 0
	 then CAST(concat(${hour},':',${minute},':',${second}) as TIME)
	 else null end)
	 ]]></signature>
        <parameters>
            <parameter column="true" name="hour" defaultValue="12"/>
			<parameter column="true" name="minute" defaultValue="30"/>
			<parameter column="true" name="second" defaultValue="40"/>
        </parameters>
        <description>Returns time value from the hour, minute and seconds.Example: case when length('12') greater than less than 0 OR length('30') greater than less than 0 OR length('40') greater than less than 0
	 then CAST(concat('12',':','30',':','40') as TIME) else null end 
	 Note : Replace greater than less than with greater than less than symbols result: 12:30:40  
	 </description>
    </function>
	
	<function group="dateTime" returns="numeric">
        <key>sql.dateTime.hour</key>
        <value>HOUR</value>
        <signature><![CDATA[Extract(hour from ${datetime})]]></signature>
        <parameters>
            <parameter column="true" name="datetime" defaultValue="datetime '2014-03-08 12:20:19'"/>
        </parameters>
        <description>Returns the hour for timestamp. The value ranges from 0 to 23. Example: hour(timestamp '2014-03-08 12:20:19') result: 12 </description>
    </function>
	
	<function group="dateTime" returns="numeric">
        <key>sql.dateTime.minute</key>
        <value>MINUTE</value>
        <signature><![CDATA[Extract(minute from ${datetime})]]></signature>
        <parameters>
            <parameter column="true" name="datetime" defaultValue="datetime '2014-03-08 12:20:19'"/>
        </parameters>
        <description>Returns the minute for time. Example: minute(timestamp '2014-03-08 12:20:19') result:20</description>
    </function>
	
	<function group="dateTime" returns="numeric">
        <key>sql.dateTime.second</key>
        <value>SECOND</value>
        <signature><![CDATA[Extract(second from ${datetime})]]></signature>
        <parameters>
            <parameter column="true" name="datetime" defaultValue="datetime '2014-03-08 12:20:19'"/>
        </parameters>
        <description>Returns the second for time. Example: second(timestamp '2014-03-08 12:20:19') result:19</description>
    </function>
	
	<function group="dateTime" returns="numeric">
        <key>sql.dateTime.millisecond</key>
        <value>MILLISECOND</value>
        <signature><![CDATA[Extract (millisecond from ${datetime})]]></signature>
        <parameters>
            <parameter column="true" name="datetime" defaultValue="datetime '2014-03-08 12:20:19.344'"/>
        </parameters>
        <description>Returns the millisecond of the second for time. Example: millisecond(datetime '2014-03-08 12:20:19.344') result:344</description>
    </function>
	
	<function group="dateTime" returns="numeric">
        <key>sql.dateTime.quarter</key>
        <value>QUARTER</value>
        <signature><![CDATA[Extract(quarter from ${datetime})]]></signature>
        <parameters>
            <parameter column="true" name="datetime" defaultValue="datetime '2014-03-08 12:20:19'"/>
        </parameters>
        <description>Returns the quarter of the year for date/datetime. Example: quarter(timestamp '2014-03-08 09:00:00')/quarter(date '2014-03-08')  result:1</description>
    </function>
	
	<function group="dateTime" returns="numeric">
        <key>sql.dateTime.week</key>
        <value>WEEK</value>
        <signature><![CDATA[Extract(week from ${datetime})]]></signature>
        <parameters>
            <parameter column="true" name="datetime" defaultValue="datetime '2014-03-08 12:20:19'"/>
        </parameters>
        <description>Returns the ISO week of the year for date/dateTime. The value ranges from 0 to 53. Example: week(date '2014-03-08')/week(timestamp '2014-03-08 09:00:00')result: 9</description>
    </function>
	
   
	



<!--Conversion specific functions must be there for every xml file starts--> 
 
	<function group="type conversion" returns="text">
        <key>sql.typeConversion.cast</key>
        <value>CAST</value>
        <signature><![CDATA[CAST(${column} AS ${dataType})]]></signature>
        <parameters>
            <parameter column="true" name="column"/>
			<parameter column="false" name="dataType"/>
        </parameters>
        <description>Cast function converts one datatype to another. Note:All Values should be in single quotes if you are typing the value. Example: CAST('2019-03-22 17:34:03.000' AS string) result:2019-03-22 17:34:03.000</description>
    </function>
	
	<function group="type conversion" returns="text">
        <key>sql.typeConversion.tochar</key>
        <value>TOCHAR</value>
        <signature><![CDATA[cast(${column} AS string)]]></signature>
        <parameters>
            <parameter column="true" name="column"/>
        </parameters>
        <description>Converts value to char type. Example:	cast('2015-01-01' AS string) result:2015-01-01 </description>
    </function>
	
	<function group="type conversion" returns="numeric">
        <key>sql.typeConversion.tonum</key>
        <value>TONUM</value>
        <signature><![CDATA[CAST(${column} as NUMERIC)]]></signature>
        <parameters>
            <parameter column="true" name="column"/>
        </parameters>
        <description>This function converts value to a number type. Example: cast(23.3 AS signed) result:23</description>
    </function>
    <function group="type conversion" returns="time">
      <key>sql.typeConversion.totime</key>
      <value>TOTIME</value>
      <signature><![CDATA[CAST(${column} AS TIME)]]></signature>
      <parameters>
         <parameter column="true" name="column" />
      </parameters>
      <description>Converts value to TIME type. Format is "HH:MM:SS" (Supported range is from "-838:59:59" to "838:59:59").	Example: CAST('2019-02-12 14:06:10' AS time) RESULTS: 14:06:10. NOTE: column's value should be in quotes if the values is manually typing and its data type is "text/date/dateTime/time" type</description>
   </function>
    <function group="type conversion" returns="date">
      <key>sql.typeConversion.todate</key>
      <value>TODATE</value>
      <signature><![CDATA[CAST(${column} AS DATE)]]></signature>
      <parameters>
         <parameter column="true" name="column" />
      </parameters>
      <description>Converts value to DATE type. Format is "YYYY-MM-DD" (Supported range is from "1000-01-01" to "9999-12-31").Example: CAST('2019-02-12 14:06:10' AS date) RESULTS: 2019-02-12.NOTE: column's value should be in quotes if the values is manually typing</description>
   </function>
   <function group="type conversion" returns="dateTime">
      <key>sql.typeConversion.todatetime</key>
      <value>TODATETIME</value>
      <signature><![CDATA[CAST(${column} AS DATETIME)]]></signature>
      <parameters>
         <parameter column="true" name="column" />
      </parameters>
      <description>Converts value to DATETIME type. Format is "YYYY-MM-DD HH:MM:SS" (Supported range is from "1000-01-01 00:00:00" to "9999-12-31 23:59:59"). Example:CAST('2019-02-12' AS datetime) RESULTS: 2019-02-12 00:00:00.NOTE: column's value should be in quotes if the values is manually typing</description>
   </function>
   <function group="type conversion" returns="numeric">
        <key>sql.typeConversion.todecimal</key>
        <value>TODECIMAL</value>
        <signature><![CDATA[cast(${column} AS FLOAT64)]]></signature>
        <parameters>
            <parameter column="true" name="column"/>
        </parameters>
        <description>Converts the value to decimal type. Example: cast(23.3 as decimal) result: 23</description>
    </function>
	
	 <!--function group="type conversion" returns="numeric">
        <key>sql.typeConversion.DATA_TYPE</key>
        <value>TYPEOF</value>
        <signature><![CDATA[DATA_TYPE FROM information_schema.columns ${column}]]></signature>
        <parameters>
            <parameter column="true" name="column"/>
        </parameters>
        <description>Converts the value to decimal type. Example: cast(23.3 as decimal) result: 23</description>
    </function-->
	
  
<!--Conversion specific functions must be there for every xml file ends-->

	<function group="json" returns="text">
        <key>sql.json.jsonExtract_scalar</key>
        <value>json_extract_scalar</value>
        <signature><![CDATA[JSON_EXTRACT_SCALAR(${target},'${path}')]]></signature>
        <parameters>
            <parameter column="true" name="target"/>
			<parameter column="true" name="path"/>
        </parameters>
        <description> Returns scalar json values as string.
		Example:JSON_EXTRACT_scalar({"address":{"building":"1007","street":"Morris Park Ave"}}, '$[address].building') results:1007</description>
    </function>
	
	<function group="json" returns="text">
        <key>sql.json.jsonExtract</key>
        <value>json_extract</value>
        <signature><![CDATA[JSON_EXTRACT(${target},'${path}')]]></signature>
        <parameters>
            <parameter column="true" name="target"/>
			<parameter column="true" name="path"/>
        </parameters>
        <description>returns json values as string.
		Example:JSON_EXTRACT_scalar({"address":{"building":"1007","street":"Morris Park Ave"}}, '$[address].building') results:"1007"</description>
    </function>
	
   
	<function group="json" returns="text">
        <key>sql.json.to_json_string</key>
        <value>to_json_string</value>
        <signature><![CDATA[to_json_string(${target})]]></signature>
        <parameters>
            <parameter column="true" name="target"/>
        </parameters>
        <description>Returns a JSON-formatted string representation of value. Example:{"class" : {"students" : [{"name" : "Jane"}]}} result:"{\"class\" : {\"students\" : [{\"name\" : \"Jane\"}]}}"
      </description>
   </function>
	
	
	
	
	<!-- JSON related functions for Mysql.8.XX -->
	
	
	<!-- Logical (start)-->
	<function group="logical" returns="text">
        <key>sql.logical.and</key>
        <value>AND</value>
        <signature><![CDATA[AND (${column} ${condition} ${value}) ${moreconditions} ]]></signature>
        <parameters>
            <parameter column="true" name="column"/>
				<parameter name="condition"  defaultValue=""/>
				<parameter name="value"  defaultValue=""/>
			<parameter column="true" name="moreconditions" defaultValue=""/>
			</parameters>
        <description>Performs a logical conjunction on two expressions.
            In 'column' paramter we will 'drag column'.
			In 'condition' parameter provide conditions like (>,= etc.,).
			In 'value' parameter provide condition value.
			In 'moreconditions' parameter we will use nested 'OR' condition , 'AND' conditions. Instead of dragging column directly we will write expression in column parameter like 50 > 0.( Note : In such case don't provide anything in 'condition' and 'value' parameter). We will use AND inside IF. Example: IF (creditlim > = 50000 AND creditlim > = 10000), 'Gold', 'silver' ) </description>
    </function>
   <function group="logical" returns="text">
            <key>sql.logical.case</key>
            <value>CASE</value>
            <signature><![CDATA[(CASE ${condition} END)]]></signature>
            <parameters>
				<parameter column="true" name="condition"/>
            </parameters>
            <description>Inside case we will use when condition. Evaluates each condition from left to right and returns the result when the first condition met. If no condition met return from else if exist, otherwise return null. Example : CASE WHEN Quantity > 30 THEN "The quantity is greater than 30"  ELSE "The quantity is under 30" END </description>
    </function>
    <function group="logical" returns="text">
            <key>sql.logical.else</key>
            <value>ELSE</value>
            <signature><![CDATA[ELSE ${statement_list}]]></signature>
            <parameters>
				<parameter column="true" name="statement_list"/>
            </parameters>
            <description>Returns from statement_list when condition gets fail.We will use ELSE inside case function. Example: CASE when 50 > 0 then 'true' else 'false'</description>
    </function>
    <function group="logical" returns="text">
            <key>sql.logical.elseif</key>
            <value>ELSEIF</value>
            <signature><![CDATA[if(${column} ${condition} ${value}, ${conditiontrue}, if(${elseIfcolumn} ${elseIfcondition} ${elseIfvalue}, ${elseIfconditiontrue}, ${conditionfalse} ${moreconditions}))]]></signature>
            <parameters>
                <parameter column="true" name="column"/>
				<parameter name="condition" defaultValue=""/>
				<parameter name="value" defaultValue=""/>
				<parameter column="true" name="conditiontrue"/>
				<parameter column="true" name="elseIfcolumn"/>
				<parameter name="elseIfcondition" defaultValue=""/>
				<parameter name="elseIfvalue" defaultValue=""/>
				<parameter column="true" name="elseIfconditiontrue"/>
				<parameter column="true" name="conditionfalse" defaultValue=""/>
				<parameter column="true" name="moreconditions" defaultValue=""/>
            </parameters>
            <description>Evaluates conditions and returns 'conditiontrue' if condition is true, otherwise return 'conditionfalse'.  We will use ELSEIF inside IF 'conditiontrue' parameter. Example:IF creditlim > 50000 'PLATINUM', IF (creditlim > = 50000) 'GOLD', 'SILVER' </description>
    </function>
	
    <!--function group="logical" returns="text">
            <key>sql.logical.end</key>
            <value>END</value>
             <signature><![CDATA[(CASE ${expr} WHEN ${when} THEN ${then} ELSE ${else} END)]]></signature>
            <parameters>
                <parameter column="true" name="expr"/>
				<parameter column="true" name="when"/>
				<parameter column="true" name="then"/>
				<parameter column="true" name="else"/>
            </parameters>
            <description>Tests a series of expressions returning the "then" value for the first true "exp".</description>
    </function-->
	<function group="logical" returns="text">
            <key>sql.logical.if</key>
            <value>IF</value>
             <signature><![CDATA[if(${column} ${condition} ${value} ${moreconditions}, ${conditiontrue}, ${conditionfalse})]]></signature>
            <parameters>
                <parameter column="true" name="column"/>
				<parameter name="condition" defaultValue=""/>
				<parameter name="value" defaultValue=""/>
				 <parameter column="true" name="moreconditions" defaultValue=""/>
				<parameter column="true" name="conditiontrue" defaultValue=""/>
				<parameter column="true" name="conditionfalse"/>
            </parameters>
            <description>Inside IF we will use AND, OR conditions. Evaluates and returns 'conditiontrue' if condition is true, otherwise return 'conditionfalse'. 
			In 'column' paramter we will drag column.
			In 'condition' parameter provide conditions like (>,= etc.,).
			In 'value' parameter provide value.
			In 'moreconditions' parameter we will use nested 'OR', 'AND' conditions. Instead of dragging column directly we will write expression in column parameter like 50 > 0 (Note : In such case don't provide anything in 'condition' parameter and 'value' parameter). Example : IF (creditlim > 50000) 'PLATINUM','SILVER'</description>
    </function>
    <function group="logical" returns="text">
            <key>sql.logical.ifnull</key>
            <value>IFNULL</value>
            <signature><![CDATA[(coalesce(${expr1}, ${expr2}))]]></signature>
            <parameters>
                <parameter column="true" name="expr1"/>
				<parameter column="true" name="expr2"/>
            </parameters>
            <description>Returns Expr1 if it is not null otherwise return expr2. Example : (coalesce(null, '1234')) Results:'1234'</description>
    </function>
    <function group="logical" returns="text">
            <key>sql.logical.iif</key>
            <value>IIF</value>
             <signature><![CDATA[if(${column} ${condition} ${value}, ${conditiontrue}, ${conditionfalse})]]></signature>
            <parameters>
                <parameter column="true" name="column"/>
				<parameter name="condition" defaultValue=""/>
				<parameter name="value" defaultValue=""/>
				<parameter column="true" name="conditiontrue"/>
				<parameter column="true" name="conditionfalse"/>
            </parameters>
            <description>Evaluates and returns 'conditiontrue' if condition is true, otherwise return 'conditionfalse'. Example : IF (creditlim > 50000) 'PLATINUM','SILVER'</description>
    </function>
    <!--<function group="Logical" returns="numeric">
            <key>sql.logical.isdate</key>
            <value>ISDATE</value>
            <signature><![CDATA[var_pop(${value})]]></signature>
            <parameters>
                <parameter column="true" name="value"/>
            </parameters>
            <description></description>
    </function> -->
    <function group="logical" returns="boolean">
            <key>sql.logical.isnull</key>
            <value>ISNULL</value>
            <signature><![CDATA[IS NULL]]></signature>
            <parameters>
             </parameters>
            <description>Inside WHEN condition we will use ISNULL. Evalutes and returns 'Conditiontrue' if the expression contain Null. Example1 : CASE WHEN 1 ISNULL THEN Conditionfalse. Example2 : CASE WHEN NULL ISNULL THEN Conditiontrue </description>
		</function>	
		<function group="logical" returns="boolean">
            <key>sql.logical.not</key>
            <value>NOT</value>
            <signature><![CDATA[NOT(${column} ${condition} ${value})]]></signature>
            <parameters>
                <parameter column="true" name="column"/>
				<parameter column="true" name="condition" defaultValue=""/>
				<parameter column="true" name="value" defaultValue=""/>
            </parameters>
            <description>Evaluates and returns 'conditiontrue' if condition is false, otherwise returns 'conditionfalse'. We will use NOT inside IF. Example :  NOT(500 > 1000) result :true</description>
    </function>
    
    <function group="logical" returns="numeric">
            <key>sql.logical.or</key>
            <value>OR</value>
            <signature><![CDATA[ OR ${column} ${condition} ${value} ${moreconditions}]]></signature>
            <parameters>
                <parameter column="true" name="column"/>
				<parameter column="true" name="condition" defaultValue=""/>
				<parameter column="true" name="value" defaultValue=""/>
				<parameter column="true" name="moreconditions" defaultValue=""/>
            </parameters>
            <description>Performs a logical disjunction on two expressions. 
			In 'column' paramter we will drag column.
			In 'condition' parameter provide conditions like (>,= etc.,).
			In 'value' parameter provide value.
			In 'moreconditions' parameter we will use nested 'OR' , 'AND' functions. Instead of dragging column directly we will write expression in column parameter like 50 > 0 in such case don't provide anything in 'condition' and 'value' parameter. We will use OR inside IF. Example : IF (creditlim > = 50000 OR creditlim > = 10000), 'Gold', 'silver' )</description>
    </function>

    <function group="logical" returns="numeric">
            <key>sql.logical.when</key>
			 <value>WHEN</value>
             <signature><![CDATA[WHEN ${column} ${searchcondition} ${value} THEN ${statement_list}  ${moreconditions}]]></signature>
            <parameters>
                <parameter column="true" name="column"/>
				<parameter column="true" name="searchcondition" defaultValue=""/>
				<parameter column="true" name="value" defaultValue=""/>
				<parameter column="true" name="statement_list"/>
				<parameter column="true" name="moreconditions" defaultValue=""/>
            </parameters>
            <description>Returns 'statement_list' when condition get satisfied .
			In column paramter we will drag column.
			In searchcondition parameter provide conditions like (>, =, IS Null etc .,).
			In value parameter provide value(Note : IS Null used in 'condition' parameter then don't provide anything in 'value' parameter). 
			In moreconditions parameter we will use nested when conditions, Else condition . We will use WHEN inside CASE. Example1 : CASE WHEN 1 > 0  THEN 'one' else 'TWO'. Example2 : CASE WHEN 'Singapore' IS NULL THEN 'Singa' ELSE 'pore'. Example3 : CASE WHEN Washington like '%sh%' THEN 'return washington' else 'NotMatched' </description>
    </function>
	<function group="logical" returns="text">
            <key>sql.logical.zn</key>
            <value>ZN</value>
            <signature><![CDATA[if(${expr} IS NULL, '0',${expr})]]></signature>
            <parameters>
                <parameter column="true" name="expr"/>
            </parameters>
            <description>Returns "expression" if it is not null, otherwise returns zero.Example :if(null IS NULL, '0','123') result :'0'.NOTE:Return types for the this function should be same.</description>
    </function>
    
    <!-- Logical (end)-->
	
	<!--  bigquery specific functions  (start)-->
   

    <function group="bigquery specific" returns="text">
        <key>sql.text.proper</key>
        <value>proper</value>
        <signature><![CDATA[concat(upper(substr(${string}, 1, 1)),lower(substr(${string}, 2)))]]></signature>
        <parameters>
            <parameter column="true" name="string"/>
        </parameters>
        <description>It converts the first character in each word to uppercase and the rest to lowercase. Example: proper('singapore') result:Singapore</description>
    </function>



  <function group="bigquery specific" returns="text">
       <key>sql.text.dateTimeToString</key>
      <value>dateTimeToString</value>
	  <signature><![CDATA[cast(${column} AS string)]]></signature>
      <parameters>
         <parameter column="true" name="column" />
      </parameters>
      <description>Converts the datetime to string</description>
   </function>
   
   <function group="bigquery specific" returns="text">
      <key>sql.text.timeToString</key>
      <value>timeToString</value>
      <signature><![CDATA[cast(${column} AS string)]]></signature>
      <parameters>
         <parameter column="true" name="column" />
      </parameters>
      <description>Converts the time to string</description>
   </function>
    <function group="bigquery specific" returns="text">
      <key>sql.text.dateToString</key>
      <value>dateToString</value>
       <signature><![CDATA[cast(${column} AS string)]]></signature>
      <parameters>
         <parameter column="true" name="column" />
      </parameters>
      <description>Converts the date to string</description>
   </function>
    <function group="bigquery specific" returns="text">
     <key>sql.text.numericToString</key>
      <value>numericToString</value>
       <signature><![CDATA[cast(${column} AS string)]]></signature>
      <parameters>
         <parameter column="true" name="column" />
      </parameters>
      <description>Converts the number,date,dateTime,time to string.Eg:CAST(120) RESULTS:'120'.NOTE: column's value should be in quotes if the values is manually typing and its data type is "text/date/dateTime/time" type</description>
   </function>
    <function group="bigquery specific" returns="text">
     <key>sql.text.otherToString</key>
      <value>otherToString</value>
       <signature><![CDATA[cast(${column} AS string)]]></signature>
      <parameters>
         <parameter column="true" name="column" />
      </parameters>
      <description>Converts the number,date,dateTime,time to string.Eg:CAST(120) RESULTS:'120'.NOTE: column's value should be in quotes if the values is manually typing and its data type is "text/date/dateTime/time" type</description>
   </function>

   
<!--Conversion specific functions must be there for every xml file ends-->
</functions>