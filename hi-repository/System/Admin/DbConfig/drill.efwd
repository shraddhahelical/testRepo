<?xml version="1.0" encoding="UTF-8"?>
<EFWD mandatory="true">
<DataMaps>

		<DataMap id="1" connection="1" type="metadata.dbmetadata">
            <Name>getCatalog</Name>
            <catalog>TABLE_CAT</catalog>
            <Query>
               
                <![CDATA[
				
				{"catalog":${catalogs},"schema":${schemas},"table":["TABLE","VIEW"],"tablePattern":""}
						
                ]]>
           
            </Query>
          <Parameters>
            <Parameter name="catalogs" type="String" default="''"/>
			 <Parameter name="schemas" type="String" default="''"/>
        </Parameters>
        </DataMap>
		<DataMap id="2" connection="1" type="metadata.groovy">
            <Name>getSchema</Name>
            <Query>
               
                 <![CDATA[
import com.helicalinsight.datasource.DatabaseConnectionFactory
import com.helicalinsight.datasource.JDBCDriver
import com.helicalinsight.efw.exceptions.EfwServiceException
import net.sf.json.JSONArray
import net.sf.json.JSONObject

import java.sql.*

public JSONObject getDatabaseTables(JSONObject connectionJson) {
    String url = null;
    String username = null;
    String password = null;
    String driverClassName = null;
    String nosqlDriver = null;
    if (connectionJson.has("url")) {
        url = connectionJson.getString("url");
    } else if (connectionJson.has("Url")) {
        url = connectionJson.getString("Url");
    } else if (connectionJson.has("jdbcUrl")) {
        url = connectionJson.getString("jdbcUrl");
    }
    if (connectionJson.has("username")) {
        username = connectionJson.getString("username");
    }
    if (connectionJson.has("userName")) {
        username = connectionJson.getString("userName");
    }
    if (connectionJson.has("password")) {
        password = connectionJson.getString("password");
    }
    if (connectionJson.has("User")) {
        username = connectionJson.getString("User");
    }
    if (connectionJson.has("Pass")) {
        password = connectionJson.getString("Pass");
    }
    if (connectionJson.has("driverClassName")) {
        driverClassName = connectionJson.getString("driverClassName");
    }
    if (connectionJson.has("Driver")) {
        driverClassName = connectionJson.getString("Driver");
    }
	if(connectionJson.has("driverName")){
	driverClassName = connectionJson.getString("driverName");
}
//driverClassName
    JSONObject dataObjects = new JSONObject();

    Connection connection = null;
    Statement statement = null;
    ResultSet rs = null;
    JSONArray dataArray = new JSONArray();


    if (driverClassName.startsWith(com.helicalinsight.efw.utility.JsonUtils.getHiMiddleWareName())) {
        nosqlDriver = driverClassName;
        String minusDs = DatabaseConnectionFactory.getMinus1DataSource();
        JSONObject formDataMinusJson = JSONObject.fromObject(minusDs);
        url = formDataMinusJson.getString("url");
        username = formDataMinusJson.getString("username");
        password = formDataMinusJson.getString("password");
        driverClassName = formDataMinusJson.getString("driverClassName");

        if (nosqlDriver.contains("nosql")) {

            try {
                connection = DriverManager.getConnection(url, username, password);
                statement = connection.createStatement();
                String query = "show databases";
                rs = statement.executeQuery(query);
                while (rs.next()) {
                    JSONObject catalog = new JSONObject();
                    String resultText = rs.getString("SCHEMA_NAME");
                    if (checkDatasourceName(resultText,connectionJson)) {
                        if (connectionJson.has("subType") && connectionJson.subType.contains("nosql.mongo")) {

                          checkDatabaseForMiddlewareMongo(connectionJson, resultText, dataArray, catalog)
                        } else {
                            catalog.put("schemas", resultText);
                            dataArray.add(catalog);
                        }
                       
                    }
                }
				if(dataArray.size() == 0){
					throw new EfwServiceException("No databases/collections is not exists.");
				}
            } catch (SQLException e) {
                e.printStackTrace();
            } finally {
                try {
                    if (rs != null) {
                        rs.close();
                    }
                    if (statement != null) {
                        statement.close();
                    }
                    if (connection != null) {
                        connection.close();
                    }
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
        } else {
            JSONObject catalog = new JSONObject();
            catalog.put("schemas", "dfs.hidw");
            dataArray.add(catalog);
        }
    } else {
        try {
            if (driverClassName != null && !driverClassName.isEmpty()) {

                connection = JDBCDriver.getConnection(url, username, password, driverClassName);
            } else {
                connection = DriverManager.getConnection(url, username, password);
            }


            statement = connection.createStatement();
            String query = "show databases";
            rs = statement.executeQuery(query);
            while (rs.next()) {
                JSONObject catalog = new JSONObject();
                String resultText = rs.getString("SCHEMA_NAME");
                catalog.put("schemas", resultText);
                dataArray.add(catalog);
            }

        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            try {
                if (rs != null) {
                    rs.close();
                }
                if (statement != null) {
                    statement.close();
                }
                if (connection != null) {
                    connection.close();
                }
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
    }
    dataObjects.put("data", dataArray);

    return dataObjects;
}

public JSONArray checkDatabaseForMiddlewareMongo(JSONObject connectionJson, String resultText, JSONArray dataArray, JSONObject catalog) {
    if (connectionJson.has("databaseName")) {

            if (resultText.equals(connectionJson.name + "_" + connectionJson.getString("id") + "." + connectionJson.getString("databaseName") )) {
                catalog.put("schemas", resultText);
                dataArray.add(catalog);
            }
    } else {
        catalog.put("schemas", resultText);
        dataArray.add(catalog);
    }
return dataArray;
}
public boolean checkDatasourceName(String resultText,JSONObject connectionJson){
	if(connectionJson.has("name")){
		return resultText.contains(connectionJson.getString("name"))
	}else if(connectionJson.has("@name")){
		return resultText.contains(connectionJson.getString("@name"))
	}
}
return getDatabaseTables(queryParams.connection);

						
                ]]>
           
            </Query>
			<Parameters>
            <Parameter name="catalogs" type="String" default="table_schema"/>
			
        </Parameters>
        </DataMap>
		 
		<DataMap id="3" connection="1" type="metadata.groovy" >
           <Name>getTable</Name>
            <Query>
                
  <![CDATA[
				
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import com.helicalinsight.efw.exceptions.EfwServiceException;
import net.sf.json.JSONArray;
import net.sf.json.JSONObject;
import com.helicalinsight.datasource.DatabaseConnectionFactory;
import com.helicalinsight.datasource.JDBCDriver;

public JSONObject getDatabaseTables(JSONObject connectionJson) {
String url=null;
String username =null;
String password =null;
String driverClassName =null;
String nosqlDriver=null;
if(connectionJson.has("url")){
url=connectionJson.getString("url");
}
else if(connectionJson.has("Url")){
url=connectionJson.getString("Url");
}else if (connectionJson.has("jdbcUrl")) {
        url = connectionJson.getString("jdbcUrl");
    }

if(connectionJson.has("username")){
	username = connectionJson.getString("username");
}
if(connectionJson.has("userName")){
	username = connectionJson.getString("userName");
}
if(connectionJson.has("password")){
	password = connectionJson.getString("password");
}
if(connectionJson.has("User")){
	username = connectionJson.getString("User");
}
if(connectionJson.has("Pass")){
	password = connectionJson.getString("Pass");
}
if(connectionJson.has("driverClassName")){
	driverClassName = connectionJson.getString("driverClassName");
}
if(connectionJson.has("Driver")){
	driverClassName = connectionJson.getString("Driver");
}
if(connectionJson.has("driverName")){
	driverClassName = connectionJson.getString("driverName");
}




String fileName=url
boolean filter;

if(driverClassName.startsWith(com.helicalinsight.efw.utility.JsonUtils.getHiMiddleWareName())){
	nosqlDriver=driverClassName;
	String minusDs = DatabaseConnectionFactory.getMinus1DataSource();
	JSONObject formDataMinusJson = JSONObject.fromObject(minusDs);
    url=formDataMinusJson.getString("url");
	username = formDataMinusJson.getString("username");
	password = formDataMinusJson.getString("password");
	driverClassName = formDataMinusJson.getString("driverClassName");
	filter=true
}



JSONObject dataObjects = new JSONObject();

		Connection connection = null;
		Statement statement = null;
		ResultSet rs = null;
		JSONArray dataArray = new JSONArray();
		try {
		String query=null;
				if(driverClassName != null && !driverClassName.isEmpty()){
			connection = JDBCDriver.getConnection(url,username,password,driverClassName);
			}else{
				connection = DriverManager.getConnection(url,username,password);
			}
			
			statement = connection.createStatement();
			if(filter && !nosqlDriver.contains("nosql")){
			query = "show files in "+${schemas} ;
			dataArray =retrieveTableForDfs(rs,query,statement,fileName);
			}else if("${schemas}".contains("dfs.")){
			query = "show files in "+${schemas} ;
			dataArray =retrieveTableForDfs(rs,query,statement,null);
			}else{ 
			 query = "show tables from "+${schemas};
			dataArray= retrieveTableForAll( rs,query,statement);
			}
	
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			try {
				if (rs != null) {
					rs.close();
				}
				if (statement != null) {
					statement.close();
				}
				if (connection != null) {
					connection.close();
				}
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}
		if(dataArray.isEmpty() && filter && !nosqlDriver.contains("nosql")){
						throw new EfwServiceException("The file/Table may not exists ")
					}
		dataObjects.put("data", dataArray);

		return dataObjects;
	}
	JSONArray retrieveTableForDfs(ResultSet rs,String query,Statement statement,String fileName)throws SQLException{
	JSONArray resultArray = new JSONArray();

	rs = statement.executeQuery(query);
			

			while (rs.next()) {
			if(rs.getString("isDirectory")=="false"){
			JSONObject catalog = new JSONObject();
				catalog.put("catalogs","${catalog}");
				catalog.put("schemas", ${schemas}.replaceAll("`","").trim());
				catalog.put("tables",rs.getString("name"));
				resultArray.add(catalog);
			}
				continue;
			}
			if(fileName!=null){
					JSONArray duplicateArray = new JSONArray();
				resultArray.each{
					if(fileName==it.tables){
					  duplicateArray.add(it);
					}
				}
				resultArray=duplicateArray;
			}
			return resultArray;
	}
	JSONArray retrieveTableForAll(ResultSet rs,String query,Statement statement)throws SQLException{
	JSONArray resultArray = new JSONArray();
	rs = statement.executeQuery(query);


			while (rs.next()) {
				JSONObject catalog = new JSONObject();
				catalog.put("catalogs","${catalog}");
				catalog.put("schemas", rs.getString("TABLE_SCHEMA"));
				catalog.put("tables",rs.getString("TABLE_NAME"));
				resultArray.add(catalog);
			}
			return resultArray;
	}

				return getDatabaseTables(queryParams.connection);
						
                ]]>
              
            </Query>
			<Parameters>
            <Parameter name="catalog" type="String" default="hice" openQuote="'" closeQuote="'"/>
            <Parameter name="schemas" type="Integer" default="Null" openQuote="'`" closeQuote="`'"/>
			<Parameter name="tableType" type ="String" default=""/>
			<Parameter name="drillConfigObj" type ="String" default=""/>
			
        </Parameters>
        </DataMap>
		
		<DataMap id="4" connection="1" type="metadata.groovy" >
           <Name>getColumn</Name>
            <Query>
                 <![CDATA[
				
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

import net.sf.json.JSONArray;
import net.sf.json.JSONObject;
import com.helicalinsight.datasource.JDBCDriver;

import com.helicalinsight.adhoc.metadata.genericdb.MetadataRetrievalException;
import com.helicalinsight.datasource.managed.JdbcQueryExecutor;
import com.helicalinsight.datasource.managed.SparkJdbcExecutor;
import com.helicalinsight.adhoc.genericsql.AdhocUtils;
import com.helicalinsight.datasource.DatabaseConnectionFactory;

				
 public List<JSONObject> getColumnInfoForTable(String table, String url, String username, String password,String driverClassName) {
 List<JSONObject> columns = new ArrayList<>();
 Connection connection =null;
 try {
	 
	if(driverClassName != null && !driverClassName.isEmpty()){
			connection = JDBCDriver.getConnection(url,username,password,driverClassName);
			}else{
				connection = DriverManager.getConnection(url,username,password);
			}

 table = escape(table);
 Statement statement = connection.createStatement();
 String schemaName =null;
 schemaName = ${schemas};

 schemaName = ${schemas}.replaceAll("`","");
schemaName = schemaName.replaceAll("'","").trim();
  if((schemaName.split("\\.", -1).length - 1)>=2){
					int index = schemaName.lastIndexOf(".");
					String remainingValue = schemaName.substring(0,index);
					String lastDotValue =schemaName.substring(index +1,schemaName.length());
					
					schemaName = replaceLast(schemaName,lastDotValue,"`"+lastDotValue+"`");
					schemaName =schemaName.replace(remainingValue,"`"+remainingValue+"`");
					
				 }else{
					 schemaName = "`"+schemaName+"`";
				 }
 
 
 SparkJdbcExecutor jdbcQueryExecutor = new SparkJdbcExecutor(statement, "select * from " + schemaName + ".`" + table + "` limit 1");

 JSONObject result = JSONObject.fromObject(jdbcQueryExecutor.executeSql().toString());

 JSONObject metadataJson = result.getJSONArray("metadata").getJSONObject(0);

  Map<String, String> dataTypesMapping = AdhocUtils.getDataTypeMapping();
 
 for (int index = 0; index < metadataJson.size(); index++) {
	
 JSONObject indexElement = metadataJson.getJSONObject(String.valueOf(index + 1));

 String columnName = indexElement.getString("name");
 String columnType = indexElement.getString("type");

  JSONObject columnInfo = new JSONObject();
  columnInfo.put("catalogs",${catalogs} );
  columnInfo.put("schemas", schemaName.replaceAll("`",""));
  columnInfo.put("tables", table);
 		
  columnInfo.put("columns", columnName);
  columnInfo.put("type", columnType);
  String jsType = AdhocUtils.getType(columnType, dataTypesMapping);

  columnInfo.put("dataType", jsType);
  columnInfo.put("size", "0");
  columnInfo.put("nullable", "TRUE");
  columnInfo.put("position", String.valueOf(index + 1));
 
  columns.add(columnInfo);
 
 }


 } catch (SQLException ex) {
 throw new MetadataRetrievalException(ex);
 }
 finally{
 try {
				
				if (connection != null) {
					connection.close();
				}
			} catch (SQLException e) {
				e.printStackTrace();
			}
 }
 return columns;
 }
		
		
	public static String escape(String string) {
 if (string.contains("/")) {
 string = string.replaceAll("/", "//");
 }

 if (string.contains("\\")) {
 string = string.replaceAll("\\\\", "\\\\\\\\");
 }
 return string;
 }			
 
 
 public JSONObject eachTable(JSONObject connectionJson){
 String url=null;
String username =null;
String password =null;
String driverClassName =null;
if(connectionJson.has("url")){
url=connectionJson.getString("url");
}
else if(connectionJson.has("Url")){
url=connectionJson.getString("Url");
} else if (connectionJson.has("jdbcUrl")) {
        url = connectionJson.getString("jdbcUrl");
    }


if(connectionJson.has("username")){
	username = connectionJson.getString("username");
}
if(connectionJson.has("userName")){
	username = connectionJson.getString("userName");
}
if(connectionJson.has("password")){
	password = connectionJson.getString("password");
}
if(connectionJson.has("User")){
	username = connectionJson.getString("User");
}
if(connectionJson.has("Pass")){
	password = connectionJson.getString("Pass");
}
if(connectionJson.has("driverClassName")){
	driverClassName = connectionJson.getString("driverClassName");
}
if(connectionJson.has("Driver")){
	driverClassName = connectionJson.getString("Driver");
}
if(connectionJson.has("driverName")){
	driverClassName = connectionJson.getString("driverName");
}


if(driverClassName.startsWith(com.helicalinsight.efw.utility.JsonUtils.getHiMiddleWareName())){
	String minusDs = DatabaseConnectionFactory.getMinus1DataSource();
	JSONObject formDataMinusJson = JSONObject.fromObject(minusDs);
    url=formDataMinusJson.getString("url");
	username = formDataMinusJson.getString("username");
	password = formDataMinusJson.getString("password");
	driverClassName = formDataMinusJson.getString("driverClassName");
}

 JSONObject dataObject = new JSONObject();
 List<JSONObject> singleObjectInList = new ArrayList<>();
 List<JSONObject> allObjectsInList = new ArrayList<>();
		
 JSONArray allTables = new JSONArray();
			String names ="${tables}";
			
			List<String> tableNames = Arrays.asList(names.split(","));
			
			for(String name :  tableNames){
			name = name.replaceAll("\'","");
		
				singleObjectInList=getColumnInfoForTable(name,url,username,password,driverClassName);			
						
						allObjectsInList.addAll(singleObjectInList);
						
					}
					
dataObject.put("data", allObjectsInList);	
return dataObject;				
				}
				
String replaceLast(String string, String substring, String replacement)
{
  int index = string.lastIndexOf(substring);
  if (index == -1)
    return string;
  return string.substring(0, index) + replacement
          + string.substring(index+substring.length());
}
return eachTable(queryParams.connection);				
				
   
                ]]>
            </Query>
			<Parameters>
            <Parameter name="catalogs" type="String" default="" />
            <Parameter name="schemas" type="Collection" default="Null"/>
            <Parameter name="tables" type="Collection" default="Null"/>
        </Parameters>
        </DataMap>
		
</DataMaps> 
  
      
</EFWD>