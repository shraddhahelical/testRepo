<?xml version="1.0" encoding="UTF-8"?>
<EFWD mandatory="true">
<DataMaps>

		<DataMap id="1" connection="1" type="metadata.dbmetadata">
            <Name>getCatalog</Name>
            <catalog>TABLE_CAT</catalog>
            <Query>
               
                <![CDATA[
				
				
						  {"catalog":${catalogs},"schema":${schemas},"table":["TABLE","VIEW"],"tablePattern":""}
						
						
                ]]>
           
            </Query>
          <Parameters>
            <Parameter name="catalogs" type="String" default="''"/>
			 <Parameter name="schemas" type="String" default="''"/>
        </Parameters>
        </DataMap>
		<DataMap id="2" connection="1" type="metadata.groovy">
            <Name>getSchema</Name>
            <Query>
               
                 <![CDATA[
				
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

import net.sf.json.JSONArray;
import net.sf.json.JSONObject;
import com.helicalinsight.datasource.JDBCDriver;

public JSONObject getDatabaseTables(JSONObject connectionJson) {
String url=null;
String username =null;
String password =null;
String driverClassName =null;
if(connectionJson.has("url")){
url=connectionJson.getString("url");
}
else if(connectionJson.has("Url")){
url=connectionJson.getString("Url");
}
if(connectionJson.has("username")){
	username = connectionJson.getString("username");
}
if(connectionJson.has("userName")){
	username = connectionJson.getString("userName");
}
if(connectionJson.has("User")){
	username = connectionJson.getString("User");
}
if(connectionJson.has("Pass")){
	password = connectionJson.getString("Pass");
}
if(connectionJson.has("password")){
	password = connectionJson.getString("password");
}
if(connectionJson.has("driverClassName")){
	driverClassName = connectionJson.getString("driverClassName");
}
if(connectionJson.has("Driver")){
	driverClassName = connectionJson.getString("Driver");
}
//driverClassName
JSONObject dataObjects = new JSONObject();
		
		Connection connection = null;
		Statement statement = null;
		ResultSet rs = null;
		JSONArray dataArray = new JSONArray();
		try {
			if(driverClassName != null && !driverClassName.isEmpty()){
			connection = JDBCDriver.getConnection(url,username,password,driverClassName);
			}else{
				connection = DriverManager.getConnection(url,username,password);
			}
		
			statement = connection.createStatement();
			String query = "show databases";
			rs = statement.executeQuery(query);
			
			while (rs.next()) {
				JSONObject catalog = new JSONObject();
				
				String dbName=null;
				try{
				dbName=rs.getString("databaseName");
					}catch(SQLException e){
					if(dbName==null || dbName.isEmpty()){
					dbName= rs.getString("database_name");
					}
				}
				catalog.put("schemas", dbName);
				dataArray.add(catalog);
		
			}

		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			try {
				if (rs != null) {
					rs.close();
				}
				if (statement != null) {
					statement.close();
				}
				if (connection != null) {
					connection.close();
				}
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}
		dataObjects.put("data", dataArray);

		return dataObjects;
	}

				return getDatabaseTables(queryParams.connection);
						
                ]]>
           
            </Query>
			<Parameters>
            <Parameter name="catalogs" type="String" default="table_schema"/>
        </Parameters>
        </DataMap>
		 
		<DataMap id="3" connection="1" type="metadata.groovy" >
           <Name>getTable</Name>
            <Query>
                
  <![CDATA[
				
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

import net.sf.json.JSONArray;
import net.sf.json.JSONObject;
import com.helicalinsight.datasource.JDBCDriver;

public JSONObject getDatabaseTables(JSONObject connectionJson) {
String url=null;
String username =null;
String password =null;
String driverClassName =null;

if(connectionJson.has("url")){
url=connectionJson.getString("url");
}
else if(connectionJson.has("Url")){
url=connectionJson.getString("Url");
}
if(connectionJson.has("username")){
	username = connectionJson.getString("username");
}
if(connectionJson.has("userName")){
	username = connectionJson.getString("userName");
}

if(connectionJson.has("User")){
	username = connectionJson.getString("User");
}
if(connectionJson.has("Pass")){
	password = connectionJson.getString("Pass");
}
if(connectionJson.has("password")){
	password = connectionJson.getString("password");
}
if(connectionJson.has("driverClassName")){
	driverClassName = connectionJson.getString("driverClassName");
}
if(connectionJson.has("Driver")){
	driverClassName = connectionJson.getString("Driver");
}
//driverClassName
JSONObject dataObjects = new JSONObject();
		
		Connection connection = null;
		Statement statement = null;
		ResultSet rs = null;
		JSONArray dataArray = new JSONArray();
		try {
			if(driverClassName != null && !driverClassName.isEmpty()){
			connection = JDBCDriver.getConnection(url,username,password,driverClassName);
			}else{
				connection = DriverManager.getConnection(url,username,password);
			}
			statement = connection.createStatement();
			String query = "show tables from "+${schemas};
			rs = statement.executeQuery(query);

			while (rs.next()) {
				JSONObject catalog = new JSONObject();
				catalog.put("catalogs","Null");
				catalog.put("schemas", ${schemas});
				String tableNameString=null;
				try{
					tableNameString=rs.getString("tableName");
					}catch(SQLException ex){
					if(tableNameString==null || tableNameString.isEmpty()){
					tableNameString= rs.getString("tab_name");
					}
					}
				catalog.put("tables", tableNameString);
				dataArray.add(catalog);
			}

		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			try {
				if (rs != null) {
					rs.close();
				}
				if (statement != null) {
					statement.close();
				}
				if (connection != null) {
					connection.close();
				}
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}
		dataObjects.put("data", dataArray);

		return dataObjects;
	}

				return getDatabaseTables(queryParams.connection);
						
                ]]>
              
            </Query>
			<Parameters>
            <Parameter name="catalog" type="String" default="hice" openQuote="'" closeQuote="'"/>
            <Parameter name="schemas" type="Integer" default="Null" openQuote="'" closeQuote="'"/>
			
        </Parameters>
        </DataMap>
		
		<DataMap id="4" connection="1" type="metadata.groovy" >
           <Name>getColumn</Name>
            <Query>
                 <![CDATA[
				
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

import net.sf.json.JSONArray;
import net.sf.json.JSONObject;
import com.helicalinsight.datasource.JDBCDriver;

import com.helicalinsight.adhoc.metadata.genericdb.MetadataRetrievalException;
import com.helicalinsight.datasource.managed.JdbcQueryExecutor;
import com.helicalinsight.datasource.managed.SparkJdbcExecutor;
import com.helicalinsight.adhoc.genericsql.AdhocUtils;
				
 public List<JSONObject> getColumnInfoForTable(String table, String url,String username, String password,String driverClassName) {
 List<JSONObject> columns = new ArrayList<>();
  Connection connection =null;
 try {
	if(driverClassName != null && !driverClassName.isEmpty()){
			connection = JDBCDriver.getConnection(url,username,password,driverClassName);
			}else{
				connection = DriverManager.getConnection(url,username,password);
			}


 table = escape(table);
 Statement statement = connection.createStatement();
 SparkJdbcExecutor jdbcQueryExecutor = new SparkJdbcExecutor(statement, "select * from " + ${schemas} + "." + table + " limit 1");
 JSONObject result = JSONObject.fromObject(jdbcQueryExecutor.executeSql().toString());
 JSONObject metadataJson = result.getJSONArray("metadata").getJSONObject(0);




Map<String, String> dataTypesMapping = AdhocUtils.getDataTypeMapping();
 for (int index = 0; index < metadataJson.size(); index++) {
 
 JSONObject indexElement = metadataJson.getJSONObject(String.valueOf(index + 1));
 String columnName = indexElement.getString("name");
 String columnType = indexElement.getString("type");
 if(columnName.startsWith(table+".")){
	 columnName=columnName.replace(table+".","")
 }
 // allSchemas.add(columnName);

 
 JSONObject columnInfo = new JSONObject();
  columnInfo.put("catalogs", "${catalog}");
  columnInfo.put("schemas", ${schemas});
 columnInfo.put("tables", table);
 			
 columnInfo.put("columns", columnName);
 columnInfo.put("type", columnType);
 String jsType = AdhocUtils.getType(columnType, dataTypesMapping);

  columnInfo.put("dataType", jsType);
 columnInfo.put("size", "0");
 columnInfo.put("nullable", "TRUE");
 columnInfo.put("position", String.valueOf(index + 1));
 
 columns.add(columnInfo);
 
 }


 } catch (SQLException ex) {
 throw new MetadataRetrievalException(ex);
 }finally {
			try {
				
				if (connection != null) {
					connection.close();
				}
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}
 return columns;
 }
		
		
	public static String escape(String string) {
 if (string.contains("/")) {
 string = string.replaceAll("/", "//");
 }

 if (string.contains("\\")) {
 string = string.replaceAll("\\\\", "\\\\\\\\");
 }
 return string;
 }			
 
 
 public JSONObject eachTable(JSONObject connectionJson){
String url=null;
String username =null;
String password =null;
String driverClassName =null;
if(connectionJson.has("url")){
url=connectionJson.getString("url");
}
else if(connectionJson.has("Url")){
url=connectionJson.getString("Url");
}
if(connectionJson.has("username")){
	username = connectionJson.getString("username");
}
if(connectionJson.has("userName")){
	username = connectionJson.getString("userName");
}
if(connectionJson.has("User")){
	username = connectionJson.getString("User");
}
if(connectionJson.has("Pass")){
	password = connectionJson.getString("Pass");
}
if(connectionJson.has("password")){
	password = connectionJson.getString("password");
}
if(connectionJson.has("driverClassName")){
	driverClassName = connectionJson.getString("driverClassName");
} 
if(connectionJson.has("Driver")){
	driverClassName = connectionJson.getString("Driver");
}
 JSONObject dataObject = new JSONObject();
 List<JSONObject> singleObjectInList = new ArrayList<>();
		List<JSONObject> allObjectsInList = new ArrayList<>();
		
 JSONArray allTables = new JSONArray();
			String names ="${tables}";
			
			List<String> tableNames = Arrays.asList(names.split(","));
			
			for(String name :  tableNames){
			name = name.replaceAll("\'","");
			
						singleObjectInList=getColumnInfoForTable(name, url,username,password,driverClassName);
						allObjectsInList.addAll(singleObjectInList);
						
					}
dataObject.put("data", allObjectsInList);	
return dataObject;				
				}
				
return eachTable(queryParams.connection);				
				
				
   
                ]]>
            </Query>
			<Parameters>
            <Parameter name="catalog" type="String" default=""/>
            <Parameter name="schemas" type="Collection" default="Null"/>
            <Parameter name="tables" type="Collection" default="Null"/>
        </Parameters>
        </DataMap>
	
		
</DataMaps> 
  
    
  
</EFWD>