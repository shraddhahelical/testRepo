<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<report>
    <reportName>Polar Charts VF</reportName>
    <visible>true</visible>
    <metadata>
        <location>1463377807724/1463377836985</location>
        <metadataFileName>e9be6771-995b-40eb-a01c-304857a100a1.metadata</metadataFileName>
    </metadata>
    <canvas>
        <columns><![CDATA[[{"column":"travel_details.travel_date","label":"travel_details_travel_date","id":"ymyjecolq2","type":{"dataType":"dateTime","backendDatatype":"java.sql.Timestamp"},"autogen_alias":"travel_details_travel_date","groupBy":["db.generic.groupBy.group"],"alias":"Month-Year","databaseFunction":{"key":"sql.text.concat","description":"Returns the concatenation of string1, string2. Example:('Beng'||'aluru') result: Bengaluru ","value":"CONCAT","signature":"(${string1}||${string2})","returns":"text","parameters":[{"name":"string1","defaultValue":"'Beng'","value":{"key":"sql.typeConversion.cast","description":"Cast function converts one dataType to another datatype. Note:All Values should be in single quotes if user provide's value.Example: CAST('2019-03-22 17:34:03.000' AS varchar(23)) result:2019-03-22 17:34:03.0","value":"CAST","signature":"CAST(${column} AS ${dataType})","returns":"text","parameters":[{"name":"column","value":{"key":"sql.dateTime.month","description":"Returns the month of the year for date/datetime. Example: month('2007-02-03 09:00:00')/month('2007-02-03') result:2","value":"MONTH","signature":"month(${datetime})","returns":"numeric","parameters":[{"name":"datetime","defaultValue":"'2007-02-03 09:12:30'","value":"travel_details.travel_date","column":true,"aliasName":"Month-Year"}]}},{"name":"dataType","value":"CHAR(20)"}]}},{"name":"string2","defaultValue":"'aluru'","value":{"key":"sql.text.concat","description":"Returns the concatenation of string1, string2. Example:('Beng'||'aluru') result: Bengaluru ","value":"CONCAT","signature":"(${string1}||${string2})","returns":"text","parameters":[{"name":"string1","defaultValue":"'Beng'","value":"'-'"},{"name":"string2","defaultValue":"'aluru'","value":{"key":"sql.typeConversion.cast","description":"Cast function converts one dataType to another datatype. Note:All Values should be in single quotes if user provide's value.Example: CAST('2019-03-22 17:34:03.000' AS varchar(23)) result:2019-03-22 17:34:03.0","value":"CAST","signature":"CAST(${column} AS ${dataType})","returns":"text","parameters":[{"name":"column","value":{"key":"sql.dateTime.year","description":"Return year for date/dateTime. Example: year('2014-03-08 09:00:00')/year('2014-03-08') result: 2014","value":"YEAR","signature":"year(${datetime})","returns":"numeric","parameters":[{"name":"datetime","defaultValue":"'2007-02-03 09:00:00'","value":"travel_details.travel_date","column":true,"aliasName":"Month-Year"}]}},{"name":"dataType","value":"CHAR(20)"}]}}]}}]}},{"column":"travel_details.travel_cost","label":"travel_details_travel_cost","id":"3tvuca6nxsh","type":{"dataType":"numeric","backendDatatype":"java.lang.Integer"},"autogen_alias":"count_travel_cost","aggregate":["db.generic.aggregate.count"],"alias":"No of Travels"}]]]></columns>
    </canvas>
    <state><![CDATA[{"columns":[{"column":"travel_details.travel_date","label":"travel_details_travel_date","id":"ymyjecolq2","type":{"dataType":"dateTime","backendDatatype":"java.sql.Timestamp"},"autogen_alias":"travel_details_travel_date","groupBy":["db.generic.groupBy.group"],"alias":"Month-Year","databaseFunction":{"key":"sql.text.concat","description":"Returns the concatenation of string1, string2. Example:('Beng'||'aluru') result: Bengaluru ","value":"CONCAT","signature":"(${string1}||${string2})","returns":"text","parameters":[{"name":"string1","defaultValue":"'Beng'","value":{"key":"sql.typeConversion.cast","description":"Cast function converts one dataType to another datatype. Note:All Values should be in single quotes if user provide's value.Example: CAST('2019-03-22 17:34:03.000' AS varchar(23)) result:2019-03-22 17:34:03.0","value":"CAST","signature":"CAST(${column} AS ${dataType})","returns":"text","parameters":[{"name":"column","value":{"key":"sql.dateTime.month","description":"Returns the month of the year for date/datetime. Example: month('2007-02-03 09:00:00')/month('2007-02-03') result:2","value":"MONTH","signature":"month(${datetime})","returns":"numeric","parameters":[{"name":"datetime","defaultValue":"'2007-02-03 09:12:30'","value":"travel_details.travel_date","column":true,"aliasName":"Month-Year"}]}},{"name":"dataType","value":"CHAR(20)"}]}},{"name":"string2","defaultValue":"'aluru'","value":{"key":"sql.text.concat","description":"Returns the concatenation of string1, string2. Example:('Beng'||'aluru') result: Bengaluru ","value":"CONCAT","signature":"(${string1}||${string2})","returns":"text","parameters":[{"name":"string1","defaultValue":"'Beng'","value":"'-'"},{"name":"string2","defaultValue":"'aluru'","value":{"key":"sql.typeConversion.cast","description":"Cast function converts one dataType to another datatype. Note:All Values should be in single quotes if user provide's value.Example: CAST('2019-03-22 17:34:03.000' AS varchar(23)) result:2019-03-22 17:34:03.0","value":"CAST","signature":"CAST(${column} AS ${dataType})","returns":"text","parameters":[{"name":"column","value":{"key":"sql.dateTime.year","description":"Return year for date/dateTime. Example: year('2014-03-08 09:00:00')/year('2014-03-08') result: 2014","value":"YEAR","signature":"year(${datetime})","returns":"numeric","parameters":[{"name":"datetime","defaultValue":"'2007-02-03 09:00:00'","value":"travel_details.travel_date","column":true,"aliasName":"Month-Year"}]}},{"name":"dataType","value":"CHAR(20)"}]}}]}}]}},{"column":"travel_details.travel_cost","label":"travel_details_travel_cost","id":"3tvuca6nxsh","type":{"dataType":"numeric","backendDatatype":"java.lang.Integer"},"autogen_alias":"count_travel_cost","aggregate":["db.generic.aggregate.count"],"alias":"No of Travels"}],"filters":[],"customFilterExpression":"","customHavingExpression":"","customFilterExpressionObj":{},"customHavingExpressionObj":{},"havingExpressionIndexs":{},"filterExpressionIndexs":{},"options":{"limitBy":12,"prependTableNameToAlias":true},"visualisation":{"type":"Charts","chartGroup":["ChartJS","CharJSNonAxis","ChartPolar"],"selectedType":"Charts","settings":{"vf_file":"vfcharts.efwvf","vf_id":12,"dir":"1463377807724/1464094583239/","script":"(function(data, chartElement){\n\t\t\t\t\t\t\n\t\t\t\tvar script = document.createElement(\"script\");\n\t\t\t\tif(window.DashboardGlobals)\n\t\t\t\t\tscript.src = window.DashboardGlobals.baseUrl+\"/getExternalResource.html?path=1463377807724/1464094583239/Chart.min.js\";\t\t\t\t\n\t\t\t\telse\n\t\t\t\t\tscript.src = \"getExternalResource.html?path=1463377807724/1464094583239/Chart.min.js\";\n\n\t\t\t\tdocument.getElementsByTagName(\"head\")[0].appendChild(script);\n\t\t\t\t\n\t\t\t\tvar div = document.createElement(\"div\");\n//\t\t\t\tdiv.style = \"width:30%\";\n\t\t\t\t\n\t\t\t\tvar canvas = document.createElement(\"canvas\");\n\t\t\t\tcanvas.id = \"canvas\";\n\t\t\t\tcanvas.height = \"100\";\n\t\t\t\tcanvas.weight = \"100\";\n\t\t\t\t\n\t\t\t\tdiv.appendChild(canvas);\n\t\t\t\t\n\t\t\t\tdocument.getElementById(\"chart_12\").appendChild(div);\n\t\t\n\t\t\t\t//transform data\t\t\n\t\t\t\tvar metadata_1 = [];\n\t\t\t\tmetadata_1.push($.map(data[0], function(value,key) {return key}));\n\t\t\t\tmetadata_1 = metadata_1[0];\n\t\t\n\t\t\t\tconsole.log(\"metadata\",metadata_1);\n\t\t\t\t\n\t\t\t\tvar actualDatasets=[];\n\t\t\t\tvar rgb =[\"#bf616a\",\"#5B90BF\",\"#d08770\",\"#ebcb8b\",\"#a3be8c\",\"#96b5b4\",\"#8fa1b3\",\"#b48ead\",\"#ab7967\",\"#FF8A65\",\"#FFD54F\",\"#4FC3F7\",\"#673AB7\",\"#CDDC39\",\"#0ff\",\"#f0f\",\"#00f\"];\n\n\t\t\t\tfor (var index = 0; index < data.length; index++)\n\t\t\t\t{\n\t\t\t\t\tvar dp = {\n\t\t\t\t\t\tvalue: 300,\n\t\t\t\t\t\tcolor:\"#F7464A\",\n\t\t\t\t\t\thighlight: \"#FF5A5E\",\n\t\t\t\t\t\tlabel: \"Red\"\n\t\t\t\t\t};\n\t\t\t\t\tdp.label = data[index][metadata_1[0]];\n\t\t\t\t\tdp.color = rgb[index];\n\t\t\t\t\tdp.highlight= rgb[index];\n\t\t\t\t\tdp.value = data[index][metadata_1[1]];\n\t\t\t\t\tactualDatasets.push(dp);\t\t\t\n\t\t\t\t}\n\n\t\t\t\tconsole.log(\"data\",actualDatasets);\t\t\t\n\t\t\n\n\t\t\t\tvar chartData = actualDatasets;\n\t\t\t\t\n\t\t\t\tscript.onload = function(){\n\t\t\t\t\twindow.chart= new Chart(document.getElementById(\"canvas\").getContext(\"2d\")).PolarArea(chartData, {\n\t\t\t\t\tresponsive: true\t\t\t\t\t\n\t\t\t\t});\n\n\t\t\t\t}\n\n\t\t\t\n\t\t})(window.data)","type":"HIPolarChart","vizType":"Charts","chartGroup":["ChartJS","CharJSNonAxis","ChartPolar"]},"vizSelectedScripts":[]},"scripts":["hi_container.set(\"postExecution\", function () {\n $('g.c3-event-rects').css(\"fill-opacity\", \"0.2\").css(\"fill\", \"yellow\");\n    // define background color of the chart\n   //change data points color \n});\n\n"],"styles":"\n","customStyles":"","customScripts":[]}]]></state>
    <security>
        <createdBy>1</createdBy>
        <organization></organization>
    </security>
    <share mandatory="true">
        <roles mandatory="true">
            <role id="2">2</role>
        </roles>
    </share>
</report>
